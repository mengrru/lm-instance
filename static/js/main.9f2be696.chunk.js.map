{"version":3,"sources":["data-format-def.ts","global.ts","utils.ts","common.tsx","Selector.tsx","Main.tsx","Form.tsx","Test.tsx","index.tsx"],"names":["MINI_DIR","PICS_DIR","imageCache","hash","s","Md5","hashStr","genMetadata","sourceFileList","result","hashArr","Array","from","file","path","webkitRelativePath","filename","name","pathSplit","split","realPath","slice","join","length","id","push","miniPath","genHashFromPicsHash","data","picsHash","sort","a","b","getCategoryRawData","picsMetadata","res","isDefault","test","getItemTitle","replace","picId","picInfo","categoryTitle","info","title","icon","defaultPic","items","itemTitle","pic","defaultPosition","loadFile","request","XMLHttpRequest","open","send","console","log","Promise","resolve","reject","onload","readyState","status","responseText","loadImageWithoutCache","img","Image","src","Math","random","crossOrigin","e","userData","images","Object","keys","map","cTitle","imageObj","index","item","Global","canvas","document","createElement","width","height","ctx","getContext","fillStyle","fillRect","drawImage","isInEvilBrowser","ua","navigator","userAgent","toLowerCase","SaveTextLink","props","Blob","this","fileContent","type","saveAs","createBlob","href","onClick","save","className","class","children","React","Component","ShowLocalImage","state","imageBase64String","imageFile","reads","FileReader","readAsDataURL","target","setState","transFileToBase64","alt","DirUploadInput","selectDirInput","createRef","files","initSelectDirInput","current","input","setAttribute","event","handleOutput","ref","onChange","onGetFiles","bind","ImageOnCanvas","canvasObj","imageObjs","forEach","draw","err","message","imageW","imageH","canvasSize","canvasW","canvasH","border","canvasRegion","imageData","w","h","getIndex","row","col","sx","sy","sWidth","sHeight","i","j","getImageValidRegion","getImageData","clearRect","Popup","isOpen","css","position","top","left","zIndex","visibility","content","style","ResultPreview","preview","itemData","paddingTop","Item","imgObj","getAnPic","complete","updateCanvas","size","Items","pidId","itemSize","ROOT","root","curCateData","config","category","selectedCategory","metadata","itemsData","allowBlank","unshift","itemsUI","onItemClicked","selectedItem","m","Selector","categoryData","getInitSelectedCategory","genInitUserData","outputImage","getSelectedItem","find","cData","defaultId","genSingleUserData","d","itemId","findIndex","c","imagep","genOutputImage","then","toBlob","blob","reader","prevProps","prevState","categoryUI","ctitle","hide","handleCategoryClick","u","downloadOutputImage","Main","body","clientWidth","Form","author","email","website","interface","footerText","getFullData","getCategoryInfo","onInputChange","assign","categoryInfo","property","value","PicsCategoryForm","categoryRawData","initFormData","handleChange","r","copy","key","parseInt","JSON","parse","stringify","len","categoryForm","currentIndex","checked","Test","testFileList","formOutput","testImageJSX","testImage","fileList","output","configFromForm","fileArr","getFullPath","relaPathArr","headImg","footerImg","backgroundImg","previewHeight","previewWidth","cover","categoryInfoFromForm","raw","fromForm","genConfig","metadataJSON","testHash","genHashFromSourceFileList","getFileList","getFormOutput","undefined","Page","pageId","rootData","catch","Error","match","params","WithRouterPage","withRouter","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9f2be696.chunk.js","sourcesContent":["export type PathHash = string\nexport type FullPath = string // sourceName/*\nexport type PicPath = string // PIC_DIR/CategoryName/picName\nexport type PicMiniPath = string // PIC_DIR/CategoryName/MINI_DIR/picName\nexport type PicPosition = [number, number] // percentage\nexport type PicSize = [number, number] // percentage\nexport type ArrayIndex = number\n\nexport const MINI_DIR = 'mini'\nexport const PICS_DIR = 'pics'\nexport const CONFIG_FILENAME = 'config.json'\nexport const METADATA_FILENAME = 'metadata.json'\n\n/**\n * root.json\n */\nexport type Root = {\n    root: string\n}\n/**\n * metadata.json\n */\nexport type PicMetadata = {\n    id: PathHash\n    path: PicPath\n    miniPath?: PicMiniPath\n    filename: string\n}\nexport type PicsMetadata = {\n    [id: string]: PicMetadata\n}\nexport type Metadata = {\n    hash: string,\n    data: PicsMetadata\n}\n\n/**\n * config.json\n */\nexport type Config = {\n    root: string //discard\n    info: {\n        author: {\n            name: string\n            email: string\n            website: string\n        }\n        interface: {\n            headImg: FullPath\n            footerImg: FullPath\n            backgroundImg: FullPath\n            footerText: string\n            previewWidth: number\n            previewHeight: number\n        }\n        cover: FullPath\n        title: string\n    }\n    category: {\n        [categoryTitle: string]: {\n            info: {\n                title: string\n                icon: FullPath\n                defaultPic: PathHash\n                allowBlank: boolean\n                hide: boolean\n                index: number\n            }\n            items: {\n                title: string\n                pic: {\n                    picId: PathHash\n                    defaultPosition:  PicPosition\n                }\n            }[]\n        }\n    }\n}\n\n/**\n * form data\n */\nexport type ConfigFromForm = {\n    info: {\n        author: {\n            name: string\n            email: string\n            website: string\n        }\n        interface: {\n            footerText: string\n        }\n        title: string\n    }\n    category: CategoryInfoFromForm\n    \n}\n\nexport type CategoryInfoFromForm = {\n    [categoryTitle: string]: {\n        title: string\n        allowBlank: boolean\n        hide: boolean\n        index: number\n    }\n}\n\n/**\n * category raw data, generate from pics metadata\n */\nexport type CategoryRawData = {\n    [categoryTitle: string]: {\n        info: {\n            title: string\n            icon: PicPath // from sourceName, but not implement\n            defaultPic: PathHash\n        }\n        items: {\n            [itemTitle: string]: {\n                title: string\n                pic: {\n                    picId: PathHash\n                    defaultPosition: PicPosition\n                }\n            }\n        }\n    }\n}\n\n/**\n * user output data\n */\nexport type UserOutputData = {\n    [categoryTitle: string]: {\n        itemId: ArrayIndex\n        itemTitle: string\n        pic: {\n            picId: PathHash\n            path: PicPath\n            miniPath: PicMiniPath\n            position: PicPosition\n            size: PicSize\n            index: number\n        }\n    }\n}","import { Config, Metadata } from './data-format-def'\nexport default {\n    imageCache: {}\n} as {\n    config?: Config,\n    metadata?: Metadata,\n    root?: string,\n    imageCache: {\n        [picId: string]: HTMLImageElement\n    }\n}","import { Metadata, MINI_DIR, PicMetadata, PicsMetadata, PICS_DIR, PathHash, CategoryRawData, ConfigFromForm, Config, FullPath, UserOutputData } from './data-format-def'\nimport { Md5 } from 'ts-md5/dist/md5'\nimport Global from './global'\n\nfunction hash (s: string): string {\n    return Md5.hashStr(s) as string\n}\nfunction getPathHash (picRealPath: string): PathHash {\n    // realPath: PICS_DIR/className/itemName\n    return hash(picRealPath)\n}\nexport function genMetadata (sourceFileList: FileList): Metadata {\n    /**\n     * webkitRelativePath: sourcesName/PICS_DIR/className/itemName\n     *                     sourcesName/PICS_DIR/className/MINI_NAME/itemName\n     * path: PICS_DIR/className/itemName\n     * miniPath: PICS_DIR/className/mini/itemName\n     */\n    const fileArr = Array.from(sourceFileList)\n    const result: PicsMetadata = {}\n    const hashArr: PathHash[] = []\n    for (const file of fileArr) {\n        // @ts-ignore\n        const path: string = file.webkitRelativePath\n        const filename: string = file.name\n        const pathSplit = path.split('/')\n        if (pathSplit[1] !== PICS_DIR) {\n            continue\n        }\n        // PICS_DIR/className/itemName\n        const realPath = pathSplit.slice(1, 3).join('/') + '/' + pathSplit[pathSplit.length - 1]\n        const id = getPathHash(realPath)\n        if (!result[id]) {\n            hashArr.push(id)\n            result[id] = {} as PicMetadata\n        }\n        if (pathSplit[3] === MINI_DIR) {\n            result[id].miniPath = pathSplit.slice(1).join('/')\n        } else {\n            result[id].path = realPath\n            result[id].id = id\n            result[id].filename = filename\n        }\n    }\n    return {\n        hash: genHashFromPicsHash(hashArr),\n        data: result\n    }\n}\n\nexport function genHashFromSourceFileList (sourceFileList: FileList): string {\n    /**\n     * webkitRelativePath: sourcesName/PICS_DIR/className/itemName\n     *                     sourcesName/PICS_DIR/className/MINI_NAME/itemName\n     */\n    const fileArr = Array.from(sourceFileList)\n    const hashArr = []\n    for (const file of fileArr) {\n        // @ts-ignore\n        const path: string = file.webkitRelativePath\n        const pathSplit = path.split('/')\n        if (pathSplit[1] !== PICS_DIR || pathSplit[3] === MINI_DIR) {\n            continue\n        }\n        // PICS_DIR/className/itemName\n        hashArr.push(hash(pathSplit.slice(1).join('/')))\n    }\n    return genHashFromPicsHash(hashArr)\n}\n\nfunction genHashFromPicsHash (picsHash: PathHash[]): string {\n    return hash(picsHash.sort((a, b) => a > b ? 1 : -1).join(''))\n}\n\nexport function getCategoryRawData (picsMetadata: PicsMetadata): CategoryRawData {\n    const res: CategoryRawData = {}\n    const getCategoryTitle = function (path: string): string {\n        return path.split('/')[1]\n    }\n    const isIcon = function (filename: string): boolean {\n        return /icon\\.png/g.test(filename)\n    }\n    const isDefault = function (filename: string): boolean {\n        return /default\\..*\\.png/g.test(filename)\n    }\n    const getItemTitle = function (filename: string): string {\n        return filename.replace('default.', '').replace('.png', '')\n    }\n    for (const picId in picsMetadata) {\n        const picInfo = picsMetadata[picId]\n        const categoryTitle = getCategoryTitle(picInfo.path)\n        if (!res[categoryTitle]) {\n            res[categoryTitle] = {\n                info: {\n                    title: categoryTitle,\n                    icon: '',\n                    defaultPic: ''\n                },\n                items: {}\n            }\n        }\n        if (isIcon(picInfo.filename)) {\n            res[categoryTitle].info.icon = picInfo.path\n            continue\n        }\n        if (isDefault(picInfo.filename)) {\n            res[categoryTitle].info.defaultPic = picId\n        }\n        const itemTitle = getItemTitle(picInfo.filename)\n        res[categoryTitle].items[itemTitle] = {\n            title: itemTitle,\n            pic: {\n                picId: picId,\n                defaultPosition: [0, 0]\n            }\n        }\n    }\n    return res\n}\n\nexport function genConfig (configFromForm: ConfigFromForm, sourceFileList: FileList): Config {\n    // thought fileList is not empty\n    const fileArr = Array.from(sourceFileList)\n    const picsMetadata: PicsMetadata = genMetadata(sourceFileList).data\n    const categoryRawData: CategoryRawData = getCategoryRawData(picsMetadata)\n    const getFullPath = function (name: string): FullPath {\n        for (const file of fileArr) {\n            // @ts-ignore\n            const relaPathArr = file.webkitRelativePath.split('/')\n            if (relaPathArr[1].split('.')[0] === name) {\n                return relaPathArr.join('/')\n            }\n        }\n        return ''\n    }\n    return {\n        // @ts-ignore\n        root: '/sources/' + fileArr[0].webkitRelativePath.split('/')[0] + '/',\n        info: {\n            author: configFromForm.info.author,\n            interface: {\n                headImg: getFullPath('headImg'),\n                footerImg: getFullPath('footerImg'),\n                backgroundImg: getFullPath('backgroundImg'),\n                footerText: configFromForm.info.interface.footerText,\n                previewHeight: 100,\n                previewWidth: 100\n            },\n            cover: getFullPath('cover'),\n            title: configFromForm.info.title\n        },\n        category: (function (categoryInfoFromForm, categoryRawData){\n            const res: Config['category'] = {}\n            Object.keys(categoryRawData).forEach((title) => {\n                const raw = categoryRawData[title]\n                const fromForm = categoryInfoFromForm[title]\n                res[title] = {\n                    info: {\n                        title: title,\n                        icon: raw.info.icon,\n                        defaultPic: raw.info.defaultPic,\n                        allowBlank: fromForm.allowBlank,\n                        hide: fromForm.hide,\n                        index: fromForm.index\n                    },\n                    items: Object.keys(raw.items).map(itemTitle => {\n                        return raw.items[itemTitle]\n                    })\n                }\n            })\n            return res\n        })(configFromForm.category, categoryRawData)\n    }\n}\n\nexport function getImageValidRegion (imageData: ImageData): [number, number, number, number] {\n    const data = imageData.data\n    const w = imageData.width, h = imageData.height\n    // from 1\n    const getIndex = function (row: number, col: number) {\n        return (row - 1) * w * 4 + (col - 1) * 4\n    }\n    let sx = -1, sy = -1, sWidth = -1, sHeight = -1\n    for (let i = 1; i <= h; i++) {\n        for (let j = 1; j < w; j++) {\n            if (data[getIndex(i, j) + 3] !== 0) {\n                sy = i - 1\n                break\n            }\n        }\n        if (sy !== -1) {\n            break\n        }\n    }\n    for (let i = 1; i <= w; i++) {\n        for (let j = 1; j <= h; j++) {\n            if (data[getIndex(j, i) + 3] !== 0) {\n                sx = i - 1\n                break\n            }\n        }\n        if (sx !== -1) {\n            break\n        }\n    }\n    for (let i = h; i >= 1; i--) {\n        for (let j = 1; j <= w; j++) {\n            if (data[getIndex(i, j) + 3] !== 0) {\n                sHeight = i - sy\n                break\n            }\n        }\n        if (sHeight !== -1) {\n            break\n        }\n    }\n    for (let i = w; i >= 1; i--) {\n        for (let j = 1; j <= h; j++) {\n            if (data[getIndex(j, i) + 3] !== 0) {\n                sWidth = i - sx\n                break\n            }\n        }\n        if (sWidth !== -1) {\n            break\n        }\n    }\n    return [sx, sy, sWidth, sHeight]\n}\n\nexport function loadFile (path: string): Promise<string> {\n    const request = new XMLHttpRequest()\n    request.open('get', path)\n    request.send(null)\n    console.log('call loadFile')\n    return new Promise((resolve, reject) => {\n        request.onload = function () {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    resolve(request.responseText)\n                } else {\n                    reject('Load file ' + path + ' failed.')\n                }\n            }\n        }\n    })\n}\n\n/**\n * 由于部分图片会先使用 img 标签加载，由于一些（未查证）的机制，浏览器会在后面再次请求该图时服用之前的相应。\n * 由于在后续的使用中要求图片对象携带跨域属性，所以在此处增加一条随机 query 以强制重新请求，确保此处返回的响应携带跨域属性\n */\nexport function loadImageWithoutCache (path: string): Promise<HTMLImageElement> {\n    const img = new Image()\n    img.src = path + '?t=' + Math.random()\n    img.crossOrigin = ''\n    return new Promise((resolve, reject) => {\n        img.onload = (e) => {\n            resolve(img)\n        }\n    })\n}\n\nexport function asyncTest (): Promise<string> {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('async test')\n    }, 1000)\n  })\n}\n\nexport async function genOutputImage (userData: UserOutputData): Promise<HTMLCanvasElement> {\n    const images: any[] = Object.keys(userData).map(cTitle => {\n        return {\n            imageObj: null,\n            index: userData[cTitle].pic.index,\n            path: userData[cTitle].pic.path,\n            id: userData[cTitle].pic.picId\n        }\n    })\n    /*\n    for (const item of images) {\n        const imageObj = await loadImage(item.path)\n        item.imageObj = imageObj\n    }\n    */\n   // 暂时认为Global中缓存的预览图是正常尺寸的图\n   for (const item of images) {\n        if (Global.imageCache[item.id]) {\n            item.imageObj = Global.imageCache[item.id]\n        } else {\n            item.imageObj = await loadImageWithoutCache(item.path)\n       }\n   }\n    const canvas = document.createElement('canvas')\n    canvas.width = images[0].imageObj.width\n    canvas.height = images[0].imageObj.height\n    const ctx = canvas.getContext('2d')\n    ctx!.fillStyle = '#ffffff'\n    ctx?.fillRect(0, 0, canvas.width, canvas.height)\n    images.sort((a, b) => a.index - b.index)\n    for (const item of images) {\n        if (item.imageObj) {\n            ctx?.drawImage(item.imageObj, 0, 0)\n        }\n    }\n    return canvas\n}\n\nexport function isInEvilBrowser (): boolean {\n    const ua = navigator.userAgent.toLowerCase()\n    if (\n        /micromessenger/g.test(ua) ||\n        /weibo/g.test(ua) ||\n        /qq/g.test(ua)\n    ) {\n        return true\n    }\n    return false\n}\n\nexport function getAnPic (picId: string, path: string): HTMLImageElement {\n    if (Global.imageCache[picId]) {\n        return Global.imageCache[picId]\n    }\n    const imgObj = new Image()\n    imgObj.crossOrigin = ''\n    imgObj.src = path + '?t=' + Math.random()\n    Global.imageCache[picId] = imgObj\n    return imgObj\n}\n\nexport function imageObjToBase64 (img: HTMLImageElement): string {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    canvas.width = img.width;\n    canvas.height = img.height;\n    ctx!.drawImage(img, 0, 0);\n    return canvas.toDataURL('image/jpeg');\n}","import React, { RefObject } from 'react'\nimport { saveAs } from 'file-saver'\nimport { getImageValidRegion } from './utils'\n\n/**\n * SaveTextLink\n * input: filename, file content\n */\ntype SaveTextLinkProps = {\n  filename: string\n  fileContent: string\n  class: string\n}\ntype SaveTextLinkState = {\n}\n\nexport class SaveTextLink extends React.Component<SaveTextLinkProps, SaveTextLinkState> {\n  constructor (props: SaveTextLinkProps) {\n    super(props)\n  }\n  createBlob (): Blob {\n    return new Blob([this.props.fileContent], { type: \"text/plain;charset=utf-8\" })\n  }\n  save () {\n    saveAs(this.createBlob(), this.props.filename)\n  }\n  render () {\n    return (\n      <a\n        href=\"#\"\n        onClick={() => this.save()}\n        className={this.props.class}\n      >\n        {this.props.children}\n      </a>\n    )\n  }\n}\n\n/** ShowImage\n * input: image file blob : File\n * show: image\n */\ntype ShowLocalImageState = {\n    imageBase64String: string\n}\ntype ShowLocalImageProps = {\n    imageFile: File | null\n}\nexport class ShowLocalImage extends React.Component<ShowLocalImageProps, ShowLocalImageState> {\n  constructor (props: ShowLocalImageProps) {\n    super(props)\n    this.state = {\n        imageBase64String: ''\n    }\n  }\n  transFileToBase64 (imageFile: File | null) {\n    if (!imageFile) {\n        return\n    }\n    const reads = new FileReader()\n    reads.readAsDataURL(imageFile)\n    reads.onload = (e) => {\n      if (e.target?.result === this.state.imageBase64String) {\n        return\n      }\n      this.setState({\n        imageBase64String: e.target!.result as string\n      })\n    }\n  }\n  render () {\n    this.transFileToBase64(this.props.imageFile)\n    console.log('showimage repeat exec test')\n    return (\n      <img\n        src={this.state.imageBase64String}\n        alt=\"\"\n      ></img>\n    )\n  }\n}\n\n/** DirUploadInput\n * upload a dir, return a FileList\n * output: file list : FileList\n */\ntype DirUploadInputState = {\n  files: FileList | null\n}\ntype DirUploadInputProps = {\n  handleOutput: (fileList: FileList) => void\n}\n\nexport class DirUploadInput extends React.Component<DirUploadInputProps, DirUploadInputState> {\n  selectDirInput: RefObject<HTMLInputElement>\n\n  constructor (props: DirUploadInputProps) {\n    super(props)\n    this.selectDirInput = React.createRef()\n    this.state = {\n      files: null\n    }\n  }\n  componentDidMount () {\n    this.initSelectDirInput(this.selectDirInput.current)\n  }\n  initSelectDirInput (input: HTMLInputElement | null) {\n    if (!input) {\n      return\n    }\n    input.setAttribute('webkitdirectory', '')\n    input.setAttribute('directory', '')\n    input.setAttribute('multiple', '')\n  }\n  onGetFiles (event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({\n      files: event.target.files\n    })\n    this.props.handleOutput(event.target.files as FileList)\n  }\n  render () {\n    return (\n      <div>\n        <input\n          type=\"file\" name=\"file\"\n          ref={this.selectDirInput}\n          onChange={this.onGetFiles.bind(this)}\n        ></input>\n      </div>\n    )\n  }\n}\n\n/**\n * ImageOnCanvas\n * show a image on canvas\n */\ntype ImageOnCanvasProps = {\n  // change imageObj to pathArr or def a new component to pack this component\n  imageObjs: HTMLImageElement[],\n  canvasSize: [number, number],\n  border: number\n}\ntype ImageOnCanvasState = {\n}\nexport class ImageOnCanvas extends React.Component<ImageOnCanvasProps, ImageOnCanvasState> {\n  canvasObj: RefObject<HTMLCanvasElement>\n\n  constructor (props: ImageOnCanvasProps) {\n    super(props)\n    this.canvasObj = React.createRef()\n  }\n  componentDidMount () {\n    this.props.imageObjs.forEach(e => {\n      try {\n        this.draw(e)\n      } catch (err) {\n        console.log(err.message)\n      }\n    })\n  }\n  draw (imageObj: HTMLImageElement) {\n    const imageW = imageObj.width\n    const imageH = imageObj.height\n    const [canvasW, canvasH] = this.props.canvasSize\n    const border = this.props.border\n    this.canvasObj.current!.width = canvasW\n    this.canvasObj.current!.height = canvasH\n    const ctx = this.canvasObj.current!.getContext('2d')\n    ctx?.drawImage(imageObj, 0, 0, canvasW, canvasH)\n    const [sx, sy, sWidth, sHeight] = getImageValidRegion(ctx!.getImageData(0, 0, canvasW, canvasH))\n    ctx?.clearRect(0, 0, canvasW, canvasH)\n    let canvasRegion: [number, number, number, number]\n    if (sWidth > sHeight) {\n      canvasRegion = [\n        border, \n        (canvasH - (canvasW - 2 * border) / sWidth * sHeight) / 2,\n        canvasW - 2 * border,\n        (canvasW - 2 * border) / sWidth * sHeight\n      ]\n    } else {\n      canvasRegion = [\n        (canvasW - (canvasH - 2 * border) / sHeight * sWidth) / 2,\n        border, \n        (canvasH - 2 * border) / sHeight * sWidth,\n        canvasH - 2 * border\n      ]\n    }\n    ctx!.drawImage(\n      imageObj,\n      sx / canvasW * imageW,\n      sy / canvasH * imageH,\n      sWidth / canvasW * imageW,\n      sHeight / canvasH * imageH,\n      ...canvasRegion\n    )\n  }\n  render () {\n    return (\n      <canvas\n        ref={this.canvasObj}\n      >\n      </canvas>\n    )\n  }\n}\n\ntype PopupProps = {\n  content: string | null\n}\ntype PopupState = {\n}\nexport class Popup extends React.Component<PopupProps, PopupState> {\n  constructor (props: PopupProps) {\n    super(props)\n  }\n  onCloseBtnClick () {\n    this.setState({\n      isOpen: false\n    })\n  }\n  componentDidUpdate () {\n  }\n  render () {\n    const css: React.CSSProperties = {\n      position: 'absolute',\n      width: '100%',\n      top: 0,\n      left: 0,\n      zIndex: 200,\n      visibility: this.props.content === null ? 'hidden' : 'visible'\n    }\n    return (\n      <div style={{position: 'relative'}}>\n        <div\n          className=\"popup\"\n          style={css}\n        >\n          {\n            this.props.content\n            ? <img style={{width: '100%'}} src={this.props.content} alt=\"\" />\n            : <div></div>\n          }\n        </div>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport { ImageOnCanvas, Popup } from './common';\nimport { Config, PathHash, UserOutputData } from './data-format-def';\nimport Global from './global'\nimport './Main.css'\nimport { genOutputImage, getAnPic, isInEvilBrowser } from './utils';\n\ntype ResultPreviewProps = {\n    userData: UserOutputData\n    width: string\n}\ntype ResultPreviewState = {\n}\nclass ResultPreview extends React.Component<ResultPreviewProps, ResultPreviewState> {\n    constructor (props: ResultPreviewProps) {\n        super(props)\n    }\n    render () {\n        const preview = Object.keys(this.props.userData)\n            .map(title => {\n                const itemData = this.props.userData[title]\n                const picInfo = itemData.pic\n                return (\n                    <div\n                        style={{\n                            position: 'absolute',\n                            top: 0,\n                            left: 0,\n                            zIndex: itemData.pic.index}}\n                        key={itemData.pic.picId}\n                    >\n                        <img\n                            width=\"100%\"\n                            height=\"100%\"\n                            src={(picInfo.miniPath || picInfo.path)}\n                            alt={itemData.itemTitle}\n                        />\n                    </div>\n                )\n            })\n        return (\n            <div\n                className=\"preview\"\n                style={{position: 'relative',  width: this.props.width, paddingTop: '100%' }}\n            >\n                {preview}\n            </div>\n        )\n    }\n}\n\ntype ItemProps = {\n    path: string\n    size: number\n    picId: string\n}\ntype ItemState = {\n    canvas: JSX.Element\n}\nclass Item extends React.Component<ItemProps, ItemState> {\n    imageObj: HTMLImageElement\n    constructor (props: ItemProps) {\n        super(props)\n        this.imageObj = getAnPic(props.picId, props.path)\n        this.state = {\n            canvas: (<div></div>)\n        }\n    }\n    componentDidMount () {\n        if (this.imageObj.complete) {\n            this.updateCanvas()\n        } else {\n            this.imageObj.onload = () => {\n                this.updateCanvas()\n            }\n        }\n    }\n    updateCanvas () {\n    this.setState({\n        canvas: <ImageOnCanvas\n                    imageObjs={[this.imageObj]}\n                    canvasSize={[this.props.size, this.props.size]}\n                    border={5}\n                />\n    })\n    }\n    render () {\n        return (\n            <div style={{width: this.props.size + 'px', height: this.props.size + 'px'}}>\n                {this.state.canvas}\n            </div>\n        )\n    }\n}\n\ntype ItemsPorps = {\n    selectedItem: string // unique title or ''\n    selectedCategory: string // unique title\n    handleOutput: (selectedItemTitle: string, picId: PathHash) => void\n    itemSize: number\n}\ntype ItemsState = {\n}\nclass Items extends React.Component<ItemsPorps, ItemsState> {\n    constructor (props: ItemsPorps) {\n        super(props)\n        this.state = {\n        }\n    }\n    onItemClicked (itemTitle: string, pidId: PathHash) {\n        this.props.handleOutput(itemTitle, pidId)\n    }\n    render () {\n        const itemSize = this.props.itemSize\n        const ROOT = Global.root\n        const curCateData = Global.config!.category[this.props.selectedCategory]\n        const picsMetadata = Global.metadata!.data\n        const itemsData = curCateData.items.slice()\n        if (curCateData.info.allowBlank) {\n            itemsData.unshift({\n                title: '',\n                pic: {\n                    picId: '',\n                    defaultPosition: [0, 0]\n                }\n            })\n        }\n        const itemsUI = itemsData.map((item) => {\n            // /sources/FullPath\n            if (!item.pic.picId) {\n                return (\n                    <div\n                        onClick={() => this.onItemClicked(item.title, item.pic.picId)}\n                        className={\n                            (this.props.selectedItem === item.title ? 'selected-item' : '')\n                            + ' item'\n                        }\n                        key={''}\n                        style={{width: itemSize + 'px', height: itemSize + 'px'}}\n                    >\n                    </div>\n                )\n            }\n            const m = picsMetadata[item.pic.picId]\n            const path = ROOT + (m.miniPath || m.path)\n            return (\n                <div\n                    onClick={() => this.onItemClicked(item.title, item.pic.picId)}\n                    className={\n                        (this.props.selectedItem === item.title ? 'selected-item' : '')\n                        + ' item'\n                    }\n                    key={path}\n                >\n                    <Item\n                        size={itemSize}\n                        path={path}\n                        picId={item.pic.picId}\n                    />\n                </div>\n            )\n        })\n        return (\n            <div className=\"items\">\n                {itemsUI}\n            </div>\n        )\n    }\n}\n\ntype SelectorProps = {\n    width: number\n}\ntype SelectorState = {\n    selectedCategory: string\n    userData: UserOutputData\n    outputImage: string | null\n}\nexport default class Selector extends React.Component<SelectorProps, SelectorState> {\n    categoryData: Config['category']\n    constructor (props: SelectorProps) {\n        super(props)\n        this.categoryData = Global.config!.category\n        this.state = {\n            selectedCategory: this.getInitSelectedCategory(),\n            userData: this.genInitUserData(),\n            outputImage: null\n        }\n        this.getSelectedItem = this.getSelectedItem.bind(this)\n    }\n    getInitSelectedCategory (): string{\n        return Object.keys(Global.config!.category)\n            .find(title => Global.config!.category[title].info.index === 1)!\n    }\n    genInitUserData (): UserOutputData {\n        const res: UserOutputData = {}\n        Object.keys(this.categoryData)\n            .forEach(categoryTitle => {\n                const cData = this.categoryData[categoryTitle]\n                if (!cData.info.defaultPic) {\n                    return\n                }\n                const defaultId = cData.info.defaultPic\n                res[categoryTitle] = this.genSingleUserData(categoryTitle, defaultId)\n            })\n        return res\n    }\n    genSingleUserData (categoryTitle: string, picId: PathHash): UserOutputData[any] {\n        const ROOT = Global.root\n        const cData = this.categoryData[categoryTitle]\n        const m = Global.metadata!.data\n        const picInfo = cData.items.find(e => e.pic.picId === picId)\n        const d = m[picId]\n        return {\n            itemId: cData.items.findIndex(e => e.pic.picId === picId),\n            itemTitle: picInfo!.title,\n            pic: {\n                    picId: picId,\n                    path: ROOT + d.path,\n                    miniPath: ROOT + (d.miniPath || d.path),\n                    position: picInfo!.pic.defaultPosition,\n                    size: [100, 100],\n                    index: cData.info.index\n            }\n        }\n    }\n    handleCategoryClick (title: string) {\n        this.setState({\n            selectedCategory: title\n        })\n    }\n    getSelectedItem (itemTitle: string, picId: PathHash) {\n        console.log(itemTitle)\n        const c = this.state.selectedCategory\n        if (itemTitle === '') {\n            delete this.state.userData[c]\n            this.setState({\n                userData: {\n                    ...this.state.userData,\n                }\n            })\n            return\n        }\n        if (this.state.userData[c] && this.state.userData[c].itemTitle === itemTitle) {\n            return\n        }\n        this.setState({\n            userData: {\n                ...this.state.userData,\n                [c]: this.genSingleUserData(c, picId)\n            }\n        })\n    }\n    downloadOutputImage () {\n        const imagep = genOutputImage(this.state.userData)\n        if (isInEvilBrowser()) {\n            imagep.then((canvas) => {\n                canvas.toBlob((blob) => {\n                    const reader = new FileReader()\n                    reader.readAsDataURL(blob!)\n                    reader.onload = (e) => {\n                        this.setState({\n                            outputImage: e.target?.result as string\n                        })\n                    }\n                })\n            })\n        } else {\n            imagep.then((canvas) => {\n                canvas.toBlob(function (blob) {\n                    saveAs(blob!, 'output.png')\n                })\n            })\n        }\n    }\n    componentDidUpdate (prevProps: SelectorProps, prevState: SelectorState) {\n        if (prevState.outputImage != null) {\n            this.setState({\n                outputImage: null\n            })\n        }\n    }\n    render () {\n        const width = this.props.width\n        const categoryData = this.categoryData\n        const categoryUI = Object.keys(categoryData)\n            .sort((a, b) => categoryData[a].info.index - categoryData[b].info.index)\n            .map((ctitle) => {\n                const info = categoryData[ctitle].info\n                if (info.hide) {\n                    return (\n                        <div key={ctitle}></div>\n                    )\n                }\n                return (\n                    <div\n                        key={ctitle}\n                        className={\n                            (this.state.selectedCategory === ctitle ? 'selected-category': '')\n                            + ' category-item'\n                        }\n                        style={{width: width / 4 + 'px', height: width / 4 / 1.8 + 'px'}}\n                    >\n                        {\n                            info.icon &&\n                            <img src={info.icon} alt=\"\"/>\n                        }\n                        <button onClick={() => this.handleCategoryClick(ctitle)}>{ctitle}</button>\n                    </div>\n                )\n            })\n        const selectedCategory = this.state.selectedCategory\n        const u = this.state.userData[selectedCategory]\n        \n        return (\n            <div>\n                <Popup\n                    content={this.state.outputImage}\n                >\n                </Popup>\n                <ResultPreview\n                    width={'100%'}\n                    userData={this.state.userData}\n                />\n                <div className=\"category\">\n                    {categoryUI}\n                </div>\n                <Items\n                    handleOutput={this.getSelectedItem}\n                    selectedCategory={selectedCategory}\n                    selectedItem={u ? u.itemTitle : ''}\n                    itemSize={width / 3}\n                />\n                <button className=\"download-btn\" onClick={() => this.downloadOutputImage()}>下载</button>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Config, Metadata } from './data-format-def';\nimport './Main.css'\nimport './linmo.css'\nimport Selector from './Selector'\nimport { isInEvilBrowser } from './utils';\n\ntype MainProps = {\n    config: Config,\n    metadata: Metadata\n}\ntype MainState = {\n}\nexport default class Main extends React.Component<MainProps, MainState> {\n    constructor (props: MainProps) {\n        super(props)\n    }\n    componentWillUnmount () {\n        // delete Global.config\n        // delete Global.metadata\n    }\n    render () {\n        const width = document.body.clientWidth * 0.7 * 0.94\n        return (\n            <div className=\"main\">\n                <div className=\"container\">\n                    <header className=\"header\"></header>\n                    <div className=\"body\">\n                        <Selector\n                            width={width > 400 ? 400 * 0.94 : (width < 330 ? 330 * 0.94 : width)}\n                        />\n                        {\n                            isInEvilBrowser()\n                            ? <p className=\"warning\">温馨提示：你当前在APP内置浏览器中，若想保存图片请点击下载按钮后长按上方预览区保存</p>\n                            : <p className=\"warning\">夜晚工作~夜晚工作~</p>\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { CategoryInfoFromForm, CategoryRawData, ConfigFromForm, PicsMetadata } from './data-format-def';\nimport './Form.css'\nimport { getCategoryRawData } from './utils';\n\ntype Author = {\n    name: string\n    email: string\n    website: string\n}\ntype Interface = {\n    footerText: string\n}\ntype FormState = {\n    author: Author\n    interface: Interface\n    title: string\n}\ntype FormProps = {\n    handleOutput: (output: ConfigFromForm) => void\n    picsMetadata: PicsMetadata | undefined\n}\nclass Form extends React.Component<FormProps, FormState> {\n    categoryData: CategoryInfoFromForm\n\n    constructor (props: FormProps) {\n        super(props)\n        this.state = {\n            author: {\n                name: '',\n                email: '',\n                website: ''\n            }, \n            interface: {\n                footerText: ''\n            },\n            title: '',\n        }\n        this.categoryData = {}\n        this.getFullData = this.getFullData.bind(this)\n        this.getCategoryInfo = this.getCategoryInfo.bind(this)\n        this.onInputChange = this.onInputChange.bind(this)\n    }\n    getFullData (): ConfigFromForm {\n        const data: ConfigFromForm = {\n            info: {\n                author: Object.assign({}, this.state.author),\n                interface: Object.assign({}, this.state.interface),\n                title: this.state.title\n            },\n            category: this.categoryData\n        }\n        return data\n    }\n    getCategoryInfo (categoryInfo: CategoryInfoFromForm) {\n        this.categoryData = categoryInfo\n    }\n    onInputChange (e: React.ChangeEvent<HTMLInputElement>, property: string) {\n        switch (property) {\n            case 'name':\n            case 'email':\n            case 'website':\n                this.setState({\n                    author: {\n                        ...this.state.author,\n                        [property]: e.target.value\n                    }\n                })\n                break\n            case 'footerText':\n                this.setState({\n                    interface: {\n                        ...this.state.interface,\n                        [property]: e.target.value\n                    }\n                })\n                break\n            case 'title':\n                this.setState({\n                    title: e.target.value\n                })\n        }\n    }\n    render () {\n        return (\n            <form>\n                <h2>作者信息</h2>\n                名字：\n                <input\n                    value={this.state.author.name}\n                    type=\"text\"\n                    onChange={(e) => this.onInputChange(e, 'name')}\n                /><br/>\n                邮箱：\n                <input\n                    value={this.state.author.email}\n                    type=\"text\"\n                    onChange={(e) => this.onInputChange(e, 'email')}\n                /><br/>\n                网址：\n                <input\n                    value={this.state.author.website}\n                    type=\"text\"\n                    onChange={(e) => this.onInputChange(e, 'website')}\n                /><br/>\n                <h2>页面信息</h2>\n                页脚文字：\n                <input\n                    value={this.state.interface.footerText}\n                    type=\"text\"\n                    onChange={(e) => this.onInputChange(e, 'footerText')}\n                /><br/>\n                页面标题：\n                <input\n                    value={this.state.title}\n                    type=\"text\"\n                    onChange={(e) => this.onInputChange(e, 'title')}\n                /><br/>\n                <h2>资源信息</h2>\n                {this.props.picsMetadata &&\n                    <PicsCategoryForm\n                        handleOutput={this.getCategoryInfo}\n                        picsMetadata={this.props.picsMetadata}\n                    />\n                }\n                <input\n                    type=\"button\"\n                    value=\"确定\"\n                    onClick={() => this.props.handleOutput(this.getFullData())}\n                />\n            </form>\n        )\n    }\n}\n\ntype PicsClassFormState = {\n    categoryRawData: CategoryRawData\n    data: CategoryInfoFromForm\n}\ntype PicsClassFormProps = {\n    picsMetadata: PicsMetadata\n    handleOutput: (categoryInfoFromForm: CategoryInfoFromForm) => void\n}\nclass PicsCategoryForm extends React.Component<PicsClassFormProps, PicsClassFormState> {\n    constructor (props: PicsClassFormProps) {\n        super(props)\n        const categoryRawData = getCategoryRawData(this.props.picsMetadata)\n        this.state = {\n            categoryRawData: categoryRawData,\n            data: this.initFormData(categoryRawData)\n        }\n        this.handleChange = this.handleChange.bind(this)\n    }\n    initFormData (categoryRawData: CategoryRawData) {\n        const res: CategoryInfoFromForm = {}\n        let i = 1\n        for (const title in categoryRawData) {\n            res[title] = {\n                title: title,\n                allowBlank: false,\n                hide: false,\n                index: i++\n            }\n        }\n        return res\n    }\n    handleChange (r: string, title: string, property: string) {\n        const copy: CategoryInfoFromForm = {}\n        Object.assign(copy, this.state.data)\n        Object.keys(copy).forEach(key => {\n            copy[key] = Object.assign({}, copy[key])\n        })\n        switch(property) {\n            case 'allowBlank':\n                copy[title].allowBlank = !copy[title].allowBlank\n                break\n            case 'hide':\n                copy[title].hide = !copy[title].hide\n                break\n            case 'index':\n                copy[title].index = parseInt(r)\n                break\n        }\n        this.setState({\n            data: copy\n        })\n        this.props.handleOutput(JSON.parse(JSON.stringify(copy)))\n    }\n    render () {\n        const categoryData = this.state.categoryRawData\n        const len = Object.keys(categoryData).length\n        const categoryForm = \n            Object.keys(categoryData)\n            .map((title, currentIndex) => {\n                return (\n                    <div key={title}>\n                        <span>{categoryData[title].info.title}</span>\n                        允许为空\n                        <input\n                            onChange={(e) => this.handleChange(e.target.value, title, 'allowBlank')}\n                            checked={this.state.data[title].allowBlank}\n                            name={title + '-allowBlank'}\n                            type=\"checkbox\"\n                        />\n                        隐藏\n                        <input\n                            onChange={(e) => this.handleChange(e.target.value, title, 'hide')}\n                            checked={this.state.data[title].hide}\n                            name={title + '-hide'}\n                            type=\"checkbox\"\n                        />\n                        index\n                        <select\n                            onChange={(e) => this.handleChange(e.target.value, title, 'index')}\n                            name={title + '-index'}\n                            value={this.state.data[title].index}\n                        >\n                            {\n                                Array.from(Array(len))\n                                    .map((e, i) =>\n                                        <option\n                                            key={i + 1}\n                                            value={i + 1}\n                                        > {i + 1}\n                                        </option>\n                                    )\n                            }\n                        </select>\n                    </div>\n                )\n            })\n        return (\n            <div>\n                {categoryForm}\n            </div>\n        )\n    }\n}\n\nexport default Form","import React from 'react';\nimport './Test.css';\nimport { DirUploadInput, ShowLocalImage, SaveTextLink, ImageOnCanvas } from './common'\nimport { ConfigFromForm } from './data-format-def';\nimport Form from './Form';\nimport { genConfig, genHashFromSourceFileList, genMetadata } from './utils'\n\nclass Test extends React.Component<any, any>{\n  constructor (props: any) {\n    super(props)\n    this.state = {\n      testFileList: null,\n      formOutput: null,\n      testImageJSX: (\n        <div></div>\n      )\n    }\n    const testImage = new Image()\n    testImage.src = '/sources/linmo/pics/衣服/蓝色卫衣.png'\n    testImage.onload = (e) => {\n      if (!e.target) {\n        return\n      }\n      this.setState({\n        testImageJSX: (\n          <div style={{'backgroundColor': '#fff'}}>\n            <ImageOnCanvas\n              imageObjs={[testImage]}\n              canvasSize={[90, 90]}\n              border={5}\n            ></ImageOnCanvas>\n          </div>\n        )\n      })\n    }\n  }\n  getFileList (fileList: FileList) {\n    this.setState({\n      testFileList: fileList\n    })\n  }\n  getFormOutput (output: ConfigFromForm) {\n    this.setState({\n      formOutput: output\n    })\n  }\n  genConfig () {\n    if (!this.state.testFileList || !this.state.formOutput) {\n      return ''\n    }\n    console.log(this.state.testFileList, this.state.formOutput)\n    const config = genConfig(this.state.formOutput, this.state.testFileList)\n    console.log(JSON.stringify(config))\n    return JSON.stringify(config)\n  }\n  render () {\n    const files = this.state.testFileList\n    let metadataJSON = '{}'\n    let testHash = ''\n    let metadata\n    if (files) {\n      metadata = genMetadata(files as FileList)\n      metadataJSON = JSON.stringify(metadata)\n      testHash = genHashFromSourceFileList(files)\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            FBI WARNING\n          </p>\n          <p>\n            欢迎你来到神秘页面\n          </p>\n          {this.state.testImageJSX}\n          <DirUploadInput\n            handleOutput={(fileList) => this.getFileList(fileList)}\n          />\n          <Form\n            handleOutput={(output) => this.getFormOutput(output)}\n            picsMetadata={metadata ? metadata.data : undefined}\n          />\n          {testHash}\n          <SaveTextLink\n            fileContent={metadataJSON}\n            filename=\"download_metadata_test.json\"\n            class=\"\"\n          >\n           metadata.json下载测试 \n          </SaveTextLink>\n          <SaveTextLink\n            fileContent={this.genConfig()}\n            filename=\"download_config_test.json\"\n            class=\"\"\n          >\n            config.json下载测试\n          </SaveTextLink>\n          <ShowLocalImage\n            imageFile={files ? files[2] : null}\n          />\n        </header>\n      </div>\n    );\n    }\n}\n\nexport default Test;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  withRouter\n} from \"react-router-dom\"\nimport './index.css';\nimport Main from './Main';\n// import Main from './Main';\nimport Test from './Test';\nimport { loadFile } from './utils';\nimport Global from './global'\nimport { Root } from './data-format-def';\n\nfunction Index () {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/:id\" children={<WithRouterPage />} />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\n// :id change -> state.pageId change -> exec render() function ->\n// render child page to 'loading' -> exec componentDidMount -> use id fetch config ->\n// change Page state -> rerender child page to real page or 404\n\nclass Page extends React.Component<any, any> {\n  constructor (props: any) {\n    super(props)\n    this.state = {\n      config: null,\n      metadata: null,\n      pageId: ''\n    }\n  }\n  static getDerivedStateFromProps(props: any, state: any) {\n    if (props.match.params.id !== state.pageId) {\n      return {\n        pageId: props.match.params.id\n      }\n    }\n    return null\n  }\n  componentDidMount () {\n    switch (this.state.pageId) {\n      case 'test':\n        return\n    }\n    loadFile('/sources/' + this.state.pageId + '/root.json')\n      .then((data) => {\n        const rootData: Root = JSON.parse(data)\n        Global.root = rootData.root\n        const root = Global.root\n\n        loadFile(root + 'config.json')\n          .then((config) => {\n            this.setState({\n              config: config\n            })\n          }).catch((err) => {\n            throw Error(err)\n          })\n        loadFile(root + 'metadata.json')\n          .then((metadata) => {\n            this.setState({\n              metadata: metadata\n            })\n          }).catch((err) => {\n            throw Error(err)\n          })\n      })\n    }\n  // think memory\n  render () {\n    const id = this.state.pageId\n    console.log('Page repeat check')\n    switch (id) {\n      case 'test':\n        document.title = '拉聂耳地区'\n        return (\n          <Test />\n        )\n      default:\n        if (!this.state.config || !this.state.metadata) {\n          return <div>loading</div>\n        } else {\n          try {\n            const config = JSON.parse(this.state.config)\n            const metadata = JSON.parse(this.state.metadata)\n            Global.config = config\n            Global.metadata = metadata\n            document.title = config.info.title\n            return (\n              <Main\n                config={config}\n                metadata={metadata}\n              />\n            )\n          } catch {\n            return (\n              <div>{'出错啦QAQ'}</div>\n            )\n          }\n        }\n    }\n  }\n}\n\nconst WithRouterPage = withRouter(Page)\n\nReactDOM.render(\n  <React.StrictMode>\n    {Index()}\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}