{"version":3,"sources":["global.ts","utils.ts","common.tsx","data-format-def.ts","data-trans.ts","Selector.tsx","Main.tsx","Form.tsx","Test.tsx","Create.tsx","temp-index.tsx","Auto.tsx","index.tsx"],"names":["imageCache","loadFile","path","request","XMLHttpRequest","open","send","console","log","Promise","resolve","reject","onload","readyState","status","responseText","loadImageWithoutCache","img","Image","src","Math","random","crossOrigin","e","genOutputImage","userData","a","images","Object","keys","map","cTitle","imageObj","index","pic","id","picId","item","Global","canvas","document","createElement","width","height","ctx","getContext","fillStyle","fillRect","sort","b","drawImage","isInEvilBrowser","ua","navigator","userAgent","toLowerCase","test","SaveTextLink","props","Blob","this","fileContent","type","saveAs","createBlob","filename","href","onClick","save","className","children","React","Component","ShowLocalImage","state","imageBase64String","imageFile","reads","FileReader","readAsDataURL","target","result","setState","transFileToBase64","alt","DirUploadInput","selectDirInput","createRef","files","initSelectDirInput","current","input","setAttribute","event","handleOutput","name","ref","onChange","onGetFiles","bind","ImageOnCanvas","canvasObj","imageObjs","forEach","draw","err","message","imageW","imageH","canvasSize","canvasW","canvasH","border","canvasRegion","imageData","data","w","h","getIndex","row","col","sx","sy","sWidth","sHeight","i","j","getImageValidRegion","getImageData","clearRect","Popup","isOpen","css","position","top","left","zIndex","visibility","content","style","MINI_DIR","PICS_DIR","hash","s","Md5","hashStr","genMetadata","sourceFileList","hashArr","Array","from","file","webkitRelativePath","pathSplit","split","realPath","slice","join","length","push","miniPath","genHashFromPicsHash","picsHash","getCategoryRawData","picsMetadata","res","isDefault","getItemTitle","replace","picInfo","categoryTitle","info","title","icon","defaultPic","items","itemTitle","defaultPosition","genConfig","configFromForm","fileArr","categoryRawData","getFullPath","relaPathArr","root","author","interface","headImg","footerImg","backgroundImg","footerText","previewHeight","previewWidth","cover","category","categoryInfoFromForm","raw","fromForm","allowBlank","hide","genInitUserData","categoryConfig","cData","defaultId","genSingleUserData","ROOT","m","find","d","itemId","findIndex","size","ResultPreview","preview","itemData","paddingTop","Item","imgObj","getAnPic","complete","updateCanvas","Items","pidId","itemSize","curCateData","config","selectedCategory","metadata","itemsData","unshift","itemsUI","onItemClicked","selectedItem","Selector","categoryData","getInitSelectedCategory","outputImage","getSelectedItem","c","imagep","then","toBlob","blob","reader","prevProps","prevState","categoryUI","ctitle","handleCategoryClick","u","downloadOutputImage","Main","body","clientWidth","Form","email","website","getFullData","getCategoryInfo","onInputChange","assign","categoryInfo","property","value","onConfirm","PicsCategoryForm","initFormData","handleChange","oldProps","r","copy","key","parseInt","JSON","parse","stringify","len","categoryForm","currentIndex","checked","Test","testFileList","formOutput","testImageJSX","testImage","fileList","output","metadataJSON","testHash","genHashFromSourceFileList","getFileList","getFormOutput","undefined","Create","rootJSON","IndexContent","btnCSS","display","padding","borderRadius","margin","color","textDecoration","opacity","marginTop","flexDirection","justifyContent","alignItems","Auto","userOutputData","outputImageBase64","userInput","refreshImage","v","genUserData","cInfo","cTitles","filter","cLen","md5str","mLen","sLen","floor","sMax","fill","newUserOutputData","num","iLen","iIndex","placeholder","rootName","Page","pageId","rootData","catch","Error","isAuto","match","params","auto","WithRouterPage","withRouter","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.34451e3d.chunk.js","sourcesContent":["import { Config, Metadata } from './data-format-def'\nexport default {\n    imageCache: {}\n} as {\n    config?: Config,\n    metadata?: Metadata,\n    root?: string,\n    imageCache: {\n        [picId: string]: HTMLImageElement\n    }\n}","import { UserOutputData } from './data-format-def'\nimport Global from './global'\n\nexport function getImageValidRegion (imageData: ImageData): [number, number, number, number] {\n    const data = imageData.data\n    const w = imageData.width, h = imageData.height\n    // from 1\n    const getIndex = function (row: number, col: number) {\n        return (row - 1) * w * 4 + (col - 1) * 4\n    }\n    let sx = -1, sy = -1, sWidth = -1, sHeight = -1\n    for (let i = 1; i <= h; i++) {\n        for (let j = 1; j < w; j++) {\n            if (data[getIndex(i, j) + 3] !== 0) {\n                sy = i - 1\n                break\n            }\n        }\n        if (sy !== -1) {\n            break\n        }\n    }\n    for (let i = 1; i <= w; i++) {\n        for (let j = 1; j <= h; j++) {\n            if (data[getIndex(j, i) + 3] !== 0) {\n                sx = i - 1\n                break\n            }\n        }\n        if (sx !== -1) {\n            break\n        }\n    }\n    for (let i = h; i >= 1; i--) {\n        for (let j = 1; j <= w; j++) {\n            if (data[getIndex(i, j) + 3] !== 0) {\n                sHeight = i - sy\n                break\n            }\n        }\n        if (sHeight !== -1) {\n            break\n        }\n    }\n    for (let i = w; i >= 1; i--) {\n        for (let j = 1; j <= h; j++) {\n            if (data[getIndex(j, i) + 3] !== 0) {\n                sWidth = i - sx\n                break\n            }\n        }\n        if (sWidth !== -1) {\n            break\n        }\n    }\n    return [sx, sy, sWidth, sHeight]\n}\n\nexport function loadFile (path: string): Promise<string> {\n    const request = new XMLHttpRequest()\n    request.open('get', path)\n    request.send(null)\n    console.log('call loadFile')\n    return new Promise((resolve, reject) => {\n        request.onload = function () {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    resolve(request.responseText)\n                } else {\n                    reject('Load file ' + path + ' failed.')\n                }\n            }\n        }\n    })\n}\n\n/**\n * 由于部分图片会先使用 img 标签加载，由于一些（未查证）的机制，浏览器会在后面再次请求该图时服用之前的相应。\n * 由于在后续的使用中要求图片对象携带跨域属性，所以在此处增加一条随机 query 以强制重新请求，确保此处返回的响应携带跨域属性\n */\nexport function loadImageWithoutCache (path: string): Promise<HTMLImageElement> {\n    const img = new Image()\n    img.src = path + '?t=' + Math.random()\n    img.crossOrigin = ''\n    return new Promise((resolve, reject) => {\n        img.onload = (e) => {\n            resolve(img)\n        }\n    })\n}\n\nexport function asyncTest (): Promise<string> {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('async test')\n    }, 1000)\n  })\n}\n\nexport async function genOutputImage (userData: UserOutputData): Promise<HTMLCanvasElement> {\n    const images: any[] = Object.keys(userData).map(cTitle => {\n        return {\n            imageObj: null,\n            index: userData[cTitle].pic.index,\n            path: userData[cTitle].pic.path,\n            id: userData[cTitle].pic.picId\n        }\n    })\n    /*\n    for (const item of images) {\n        const imageObj = await loadImage(item.path)\n        item.imageObj = imageObj\n    }\n    */\n   // 暂时认为Global中缓存的预览图是正常尺寸的图\n   for (const item of images) {\n        if (Global.imageCache[item.id]) {\n            item.imageObj = Global.imageCache[item.id]\n        } else {\n            item.imageObj = await loadImageWithoutCache(item.path)\n       }\n   }\n    const canvas = document.createElement('canvas')\n    canvas.width = images[0].imageObj.width\n    canvas.height = images[0].imageObj.height\n    const ctx = canvas.getContext('2d')\n    ctx!.fillStyle = '#ffffff'\n    ctx?.fillRect(0, 0, canvas.width, canvas.height)\n    images.sort((a, b) => a.index - b.index)\n    for (const item of images) {\n        if (item.imageObj) {\n            ctx?.drawImage(item.imageObj, 0, 0)\n        }\n    }\n    return canvas\n}\n\nexport function isInEvilBrowser (): boolean {\n    const ua = navigator.userAgent.toLowerCase()\n    if (\n        /micromessenger/g.test(ua) ||\n        /weibo/g.test(ua) ||\n        /qq/g.test(ua)\n    ) {\n        return true\n    }\n    return false\n}\n\nexport function getAnPic (picId: string, path: string): HTMLImageElement {\n    if (Global.imageCache[picId]) {\n        return Global.imageCache[picId]\n    }\n    const imgObj = new Image()\n    imgObj.crossOrigin = ''\n    imgObj.src = path + '?t=' + Math.random()\n    Global.imageCache[picId] = imgObj\n    return imgObj\n}\n\nexport function imageObjToBase64 (img: HTMLImageElement): string {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    canvas.width = img.width;\n    canvas.height = img.height;\n    ctx!.drawImage(img, 0, 0);\n    return canvas.toDataURL('image/jpeg');\n}","import React, { RefObject } from 'react'\nimport { saveAs } from 'file-saver'\nimport { getImageValidRegion } from './utils'\n\n/**\n * SaveTextLink\n * input: filename, file content\n */\ntype SaveTextLinkProps = {\n  filename: string\n  fileContent: string\n  className: string\n}\ntype SaveTextLinkState = {\n}\n\nexport class SaveTextLink extends React.Component<SaveTextLinkProps, SaveTextLinkState> {\n  constructor (props: SaveTextLinkProps) {\n    super(props)\n  }\n  createBlob (): Blob {\n    return new Blob([this.props.fileContent], { type: \"text/plain;charset=utf-8\" })\n  }\n  save () {\n    saveAs(this.createBlob(), this.props.filename)\n  }\n  render () {\n    return (\n      <a\n        href=\"#\"\n        onClick={() => this.save()}\n        className={this.props.className}\n      >\n        {this.props.children}\n      </a>\n    )\n  }\n}\n\n/** ShowImage\n * input: image file blob : File\n * show: image\n */\ntype ShowLocalImageState = {\n    imageBase64String: string\n}\ntype ShowLocalImageProps = {\n    imageFile: File | null\n}\nexport class ShowLocalImage extends React.Component<ShowLocalImageProps, ShowLocalImageState> {\n  constructor (props: ShowLocalImageProps) {\n    super(props)\n    this.state = {\n        imageBase64String: ''\n    }\n  }\n  transFileToBase64 (imageFile: File | null) {\n    if (!imageFile) {\n        return\n    }\n    const reads = new FileReader()\n    reads.readAsDataURL(imageFile)\n    reads.onload = (e) => {\n      if (e.target?.result === this.state.imageBase64String) {\n        return\n      }\n      this.setState({\n        imageBase64String: e.target!.result as string\n      })\n    }\n  }\n  render () {\n    this.transFileToBase64(this.props.imageFile)\n    console.log('showimage repeat exec test')\n    return (\n      <img\n        src={this.state.imageBase64String}\n        alt=\"\"\n      ></img>\n    )\n  }\n}\n\n/** DirUploadInput\n * upload a dir, return a FileList\n * output: file list : FileList\n */\ntype DirUploadInputState = {\n  files: FileList | null\n}\ntype DirUploadInputProps = {\n  handleOutput: (fileList: FileList) => void\n}\n\nexport class DirUploadInput extends React.Component<DirUploadInputProps, DirUploadInputState> {\n  selectDirInput: RefObject<HTMLInputElement>\n\n  constructor (props: DirUploadInputProps) {\n    super(props)\n    this.selectDirInput = React.createRef()\n    this.state = {\n      files: null\n    }\n  }\n  componentDidMount () {\n    this.initSelectDirInput(this.selectDirInput.current)\n  }\n  initSelectDirInput (input: HTMLInputElement | null) {\n    if (!input) {\n      return\n    }\n    input.setAttribute('webkitdirectory', '')\n    input.setAttribute('directory', '')\n    input.setAttribute('multiple', '')\n  }\n  onGetFiles (event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({\n      files: event.target.files\n    })\n    this.props.handleOutput(event.target.files as FileList)\n  }\n  render () {\n    return (\n      <div>\n        <input\n          type=\"file\" name=\"file\"\n          ref={this.selectDirInput}\n          onChange={this.onGetFiles.bind(this)}\n        ></input>\n      </div>\n    )\n  }\n}\n\n/**\n * ImageOnCanvas\n * show a image on canvas\n */\ntype ImageOnCanvasProps = {\n  // change imageObj to pathArr or def a new component to pack this component\n  imageObjs: HTMLImageElement[],\n  canvasSize: [number, number],\n  border: number\n}\ntype ImageOnCanvasState = {\n}\nexport class ImageOnCanvas extends React.Component<ImageOnCanvasProps, ImageOnCanvasState> {\n  canvasObj: RefObject<HTMLCanvasElement>\n\n  constructor (props: ImageOnCanvasProps) {\n    super(props)\n    this.canvasObj = React.createRef()\n  }\n  componentDidMount () {\n    this.props.imageObjs.forEach(e => {\n      try {\n        this.draw(e)\n      } catch (err) {\n        console.log(err.message)\n      }\n    })\n  }\n  draw (imageObj: HTMLImageElement) {\n    const imageW = imageObj.width\n    const imageH = imageObj.height\n    const [canvasW, canvasH] = this.props.canvasSize\n    const border = this.props.border\n    this.canvasObj.current!.width = canvasW\n    this.canvasObj.current!.height = canvasH\n    const ctx = this.canvasObj.current!.getContext('2d')\n    ctx?.drawImage(imageObj, 0, 0, canvasW, canvasH)\n    const [sx, sy, sWidth, sHeight] = getImageValidRegion(ctx!.getImageData(0, 0, canvasW, canvasH))\n    ctx?.clearRect(0, 0, canvasW, canvasH)\n    let canvasRegion: [number, number, number, number]\n    if (sWidth > sHeight) {\n      canvasRegion = [\n        border, \n        (canvasH - (canvasW - 2 * border) / sWidth * sHeight) / 2,\n        canvasW - 2 * border,\n        (canvasW - 2 * border) / sWidth * sHeight\n      ]\n    } else {\n      canvasRegion = [\n        (canvasW - (canvasH - 2 * border) / sHeight * sWidth) / 2,\n        border, \n        (canvasH - 2 * border) / sHeight * sWidth,\n        canvasH - 2 * border\n      ]\n    }\n    ctx!.drawImage(\n      imageObj,\n      sx / canvasW * imageW,\n      sy / canvasH * imageH,\n      sWidth / canvasW * imageW,\n      sHeight / canvasH * imageH,\n      ...canvasRegion\n    )\n  }\n  render () {\n    return (\n      <canvas\n        ref={this.canvasObj}\n      >\n      </canvas>\n    )\n  }\n}\n\ntype PopupProps = {\n  content: string | null\n}\ntype PopupState = {\n}\nexport class Popup extends React.Component<PopupProps, PopupState> {\n  constructor (props: PopupProps) {\n    super(props)\n  }\n  onCloseBtnClick () {\n    this.setState({\n      isOpen: false\n    })\n  }\n  componentDidUpdate () {\n  }\n  render () {\n    const css: React.CSSProperties = {\n      position: 'absolute',\n      width: '100%',\n      top: 0,\n      left: 0,\n      zIndex: 200,\n      visibility: this.props.content === null ? 'hidden' : 'visible'\n    }\n    return (\n      <div style={{position: 'relative'}}>\n        <div\n          className=\"popup\"\n          style={css}\n        >\n          {\n            this.props.content\n            ? <img style={{width: '100%'}} src={this.props.content} alt=\"\" />\n            : <div></div>\n          }\n        </div>\n      </div>\n    )\n  }\n}","export type PathHash = string\nexport type FullPath = string // sourceName/*\nexport type PicPath = string // PIC_DIR/CategoryName/picName\nexport type PicMiniPath = string // PIC_DIR/CategoryName/MINI_DIR/picName\nexport type PicPosition = [number, number] // percentage\nexport type PicSize = [number, number] // percentage\nexport type ArrayIndex = number\n\nexport const MINI_DIR = 'mini'\nexport const PICS_DIR = 'pics'\nexport const CONFIG_FILENAME = 'config.json'\nexport const METADATA_FILENAME = 'metadata.json'\n\n/**\n * root.json\n */\nexport type Root = {\n    root: string\n}\n/**\n * metadata.json\n */\nexport type PicMetadata = {\n    id: PathHash\n    path: PicPath\n    miniPath?: PicMiniPath\n    filename: string\n}\nexport type PicsMetadata = {\n    [id: string]: PicMetadata\n}\nexport type Metadata = {\n    hash: string,\n    data: PicsMetadata\n}\n\n/**\n * config.json\n */\nexport type Config = {\n    root: string //discard\n    info: {\n        author: {\n            name: string\n            email: string\n            website: string\n        }\n        interface: {\n            headImg: FullPath\n            footerImg: FullPath\n            backgroundImg: FullPath\n            footerText: string\n            previewWidth: number\n            previewHeight: number\n        }\n        cover: FullPath\n        title: string\n    }\n    category: {\n        [categoryTitle: string]: {\n            info: {\n                title: string\n                icon: FullPath\n                defaultPic: PathHash\n                allowBlank: boolean\n                hide: boolean\n                index: number\n            }\n            items: {\n                title: string\n                pic: {\n                    picId: PathHash\n                    defaultPosition:  PicPosition\n                }\n            }[]\n        }\n    }\n}\n\n/**\n * form data\n */\nexport type ConfigFromForm = {\n    info: {\n        author: {\n            name: string\n            email: string\n            website: string\n        }\n        interface: {\n            footerText: string\n        }\n        title: string\n    }\n    category: CategoryInfoFromForm\n    \n}\n\nexport type CategoryInfoFromForm = {\n    [categoryTitle: string]: {\n        title: string\n        allowBlank: boolean\n        hide: boolean\n        index: number\n    }\n}\n\n/**\n * category raw data, generate from pics metadata\n */\nexport type CategoryRawData = {\n    [categoryTitle: string]: {\n        info: {\n            title: string\n            icon: PicPath // from sourceName, but not implement\n            defaultPic: PathHash\n        }\n        items: {\n            [itemTitle: string]: {\n                title: string\n                pic: {\n                    picId: PathHash\n                    defaultPosition: PicPosition\n                }\n            }\n        }\n    }\n}\n\n/**\n * user output data\n */\nexport type UserOutputData = {\n    [categoryTitle: string]: {\n        itemId: ArrayIndex\n        itemTitle: string\n        pic: {\n            picId: PathHash\n            path: PicPath\n            miniPath: PicMiniPath\n            position: PicPosition\n            size: PicSize\n            index: number\n        }\n    }\n}","import { Metadata, MINI_DIR, PicMetadata, PicsMetadata, PICS_DIR, PathHash, CategoryRawData, ConfigFromForm, Config, FullPath, UserOutputData } from './data-format-def'\nimport { Md5 } from 'ts-md5/dist/md5'\n\nfunction hash (s: string): string {\n    return Md5.hashStr(s) as string\n}\nfunction getPathHash (picRealPath: string): PathHash {\n    // realPath: PICS_DIR/className/itemName\n    return hash(picRealPath)\n}\nexport function genMetadata (sourceFileList: FileList): Metadata {\n    /**\n     * webkitRelativePath: sourcesName/PICS_DIR/className/itemName\n     *                     sourcesName/PICS_DIR/className/MINI_NAME/itemName\n     * path: PICS_DIR/className/itemName\n     * miniPath: PICS_DIR/className/mini/itemName\n     */\n    const fileArr = Array.from(sourceFileList)\n    const result: PicsMetadata = {}\n    const hashArr: PathHash[] = []\n    for (const file of fileArr) {\n        // @ts-ignore\n        const path: string = file.webkitRelativePath\n        const filename: string = file.name\n        const pathSplit = path.split('/')\n        if (pathSplit[1] !== PICS_DIR) {\n            continue\n        }\n        // PICS_DIR/className/itemName\n        const realPath = pathSplit.slice(1, 3).join('/') + '/' + pathSplit[pathSplit.length - 1]\n        const id = getPathHash(realPath)\n        if (!result[id]) {\n            hashArr.push(id)\n            result[id] = {} as PicMetadata\n        }\n        if (pathSplit[3] === MINI_DIR) {\n            result[id].miniPath = pathSplit.slice(1).join('/')\n        } else {\n            result[id].path = realPath\n            result[id].id = id\n            result[id].filename = filename\n        }\n    }\n    return {\n        hash: genHashFromPicsHash(hashArr),\n        data: result\n    }\n}\n\nexport function genHashFromSourceFileList (sourceFileList: FileList): string {\n    /**\n     * webkitRelativePath: sourcesName/PICS_DIR/className/itemName\n     *                     sourcesName/PICS_DIR/className/MINI_NAME/itemName\n     */\n    const fileArr = Array.from(sourceFileList)\n    const hashArr = []\n    for (const file of fileArr) {\n        // @ts-ignore\n        const path: string = file.webkitRelativePath\n        const pathSplit = path.split('/')\n        if (pathSplit[1] !== PICS_DIR || pathSplit[3] === MINI_DIR) {\n            continue\n        }\n        // PICS_DIR/className/itemName\n        hashArr.push(hash(pathSplit.slice(1).join('/')))\n    }\n    return genHashFromPicsHash(hashArr)\n}\n\nfunction genHashFromPicsHash (picsHash: PathHash[]): string {\n    return hash(picsHash.sort((a, b) => a > b ? 1 : -1).join(''))\n}\n\nexport function getCategoryRawData (picsMetadata: PicsMetadata): CategoryRawData {\n    const res: CategoryRawData = {}\n    const getCategoryTitle = function (path: string): string {\n        return path.split('/')[1]\n    }\n    const isIcon = function (filename: string): boolean {\n        return /icon\\.png/g.test(filename)\n    }\n    const isDefault = function (filename: string): boolean {\n        return /default\\..*\\.png/g.test(filename)\n    }\n    const getItemTitle = function (filename: string): string {\n        return filename.replace('default.', '').replace('.png', '')\n    }\n    for (const picId in picsMetadata) {\n        const picInfo = picsMetadata[picId]\n        const categoryTitle = getCategoryTitle(picInfo.path)\n        if (!res[categoryTitle]) {\n            res[categoryTitle] = {\n                info: {\n                    title: categoryTitle,\n                    icon: '',\n                    defaultPic: ''\n                },\n                items: {}\n            }\n        }\n        if (isIcon(picInfo.filename)) {\n            res[categoryTitle].info.icon = picInfo.path\n            continue\n        }\n        if (isDefault(picInfo.filename)) {\n            res[categoryTitle].info.defaultPic = picId\n        }\n        const itemTitle = getItemTitle(picInfo.filename)\n        res[categoryTitle].items[itemTitle] = {\n            title: itemTitle,\n            pic: {\n                picId: picId,\n                defaultPosition: [0, 0]\n            }\n        }\n    }\n    return res\n}\n\nexport function getRootName (sourceFileList: FileList): string {\n    if (!sourceFileList || sourceFileList.length === 0) {\n        return ''\n    }\n    // @ts-ignore\n    return sourceFileList[0].webkitRelativePath.split('/')[0]\n}\n\nexport function genConfig (configFromForm: ConfigFromForm, sourceFileList: FileList): Config {\n    // thought fileList is not empty\n    const fileArr = Array.from(sourceFileList)\n    const picsMetadata: PicsMetadata = genMetadata(sourceFileList).data\n    const categoryRawData: CategoryRawData = getCategoryRawData(picsMetadata)\n    const getFullPath = function (name: string): FullPath {\n        for (const file of fileArr) {\n            // @ts-ignore\n            const relaPathArr = file.webkitRelativePath.split('/')\n            if (relaPathArr[1].split('.')[0] === name) {\n                return relaPathArr.join('/')\n            }\n        }\n        return ''\n    }\n    return {\n        // @ts-ignore\n        root: '/sources/' + fileArr[0].webkitRelativePath.split('/')[0] + '/',\n        info: {\n            author: configFromForm.info.author,\n            interface: {\n                headImg: getFullPath('headImg'),\n                footerImg: getFullPath('footerImg'),\n                backgroundImg: getFullPath('backgroundImg'),\n                footerText: configFromForm.info.interface.footerText,\n                previewHeight: 100,\n                previewWidth: 100\n            },\n            cover: getFullPath('cover'),\n            title: configFromForm.info.title\n        },\n        category: (function (categoryInfoFromForm, categoryRawData){\n            const res: Config['category'] = {}\n            Object.keys(categoryRawData).forEach((title) => {\n                const raw = categoryRawData[title]\n                const fromForm = categoryInfoFromForm[title]\n                res[title] = {\n                    info: {\n                        title: title,\n                        icon: raw.info.icon,\n                        defaultPic: raw.info.defaultPic,\n                        allowBlank: fromForm.allowBlank,\n                        hide: fromForm.hide,\n                        index: fromForm.index\n                    },\n                    items: Object.keys(raw.items).map(itemTitle => {\n                        return raw.items[itemTitle]\n                    })\n                }\n            })\n            return res\n        })(configFromForm.category, categoryRawData)\n    }\n}\n\nexport function genInitUserData (root: string, categoryConfig: Config['category'], picsMetadata: Metadata['data']): UserOutputData {\n    const res: UserOutputData = {}\n    Object.keys(categoryConfig)\n        .forEach(categoryTitle => {\n            const cData = categoryConfig[categoryTitle]\n            if (!cData.info.defaultPic) {\n                return\n            }\n            const defaultId = cData.info.defaultPic\n            res[categoryTitle] = genSingleUserData(root, categoryConfig, picsMetadata, categoryTitle, defaultId)\n        })\n    return res\n}\nexport function genSingleUserData (\n    root: string,\n    categoryConfig: Config['category'],\n    picsMetadata: Metadata['data'],\n    categoryTitle: string,\n    picId: PathHash): UserOutputData[any] {\n        const ROOT = root // Global.root\n        const cData = categoryConfig[categoryTitle]\n        const m = picsMetadata // Global.metadata!.data\n        const picInfo = cData.items.find(e => e.pic.picId === picId)\n        const d = m[picId]\n        return {\n            itemId: cData.items.findIndex(e => e.pic.picId === picId),\n            itemTitle: picInfo!.title,\n            pic: {\n                    picId: picId,\n                    path: ROOT + d.path,\n                    miniPath: ROOT + (d.miniPath || d.path),\n                    position: picInfo!.pic.defaultPosition,\n                    size: [100, 100],\n                    index: cData.info.index\n            }\n        }\n    }","import React from 'react';\nimport { ImageOnCanvas, Popup } from './common';\nimport { Config, PathHash, UserOutputData } from './data-format-def';\nimport { genInitUserData, genSingleUserData } from './data-trans';\nimport Global from './global'\nimport './Main.css'\nimport { genOutputImage, getAnPic, isInEvilBrowser } from './utils';\n\ntype ResultPreviewProps = {\n    userData: UserOutputData\n    width: string\n}\ntype ResultPreviewState = {\n}\nclass ResultPreview extends React.Component<ResultPreviewProps, ResultPreviewState> {\n    constructor (props: ResultPreviewProps) {\n        super(props)\n    }\n    render () {\n        const preview = Object.keys(this.props.userData)\n            .map(title => {\n                const itemData = this.props.userData[title]\n                const picInfo = itemData.pic\n                return (\n                    <div\n                        style={{\n                            position: 'absolute',\n                            top: 0,\n                            left: 0,\n                            zIndex: itemData.pic.index}}\n                        key={itemData.pic.picId}\n                    >\n                        <img\n                            width=\"100%\"\n                            height=\"100%\"\n                            src={(picInfo.miniPath || picInfo.path)}\n                            alt={itemData.itemTitle}\n                        />\n                    </div>\n                )\n            })\n        return (\n            <div\n                className=\"preview\"\n                style={{position: 'relative',  width: this.props.width, paddingTop: '100%' }}\n            >\n                {preview}\n            </div>\n        )\n    }\n}\n\ntype ItemProps = {\n    path: string\n    size: number\n    picId: string\n}\ntype ItemState = {\n    canvas: JSX.Element\n}\nclass Item extends React.Component<ItemProps, ItemState> {\n    imageObj: HTMLImageElement\n    constructor (props: ItemProps) {\n        super(props)\n        this.imageObj = getAnPic(props.picId, props.path)\n        this.state = {\n            canvas: (<div></div>)\n        }\n    }\n    componentDidMount () {\n        if (this.imageObj.complete) {\n            this.updateCanvas()\n        } else {\n            this.imageObj.onload = () => {\n                this.updateCanvas()\n            }\n        }\n    }\n    updateCanvas () {\n    this.setState({\n        canvas: <ImageOnCanvas\n                    imageObjs={[this.imageObj]}\n                    canvasSize={[this.props.size, this.props.size]}\n                    border={5}\n                />\n    })\n    }\n    render () {\n        return (\n            <div style={{width: this.props.size + 'px', height: this.props.size + 'px'}}>\n                {this.state.canvas}\n            </div>\n        )\n    }\n}\n\ntype ItemsPorps = {\n    selectedItem: string // unique title or ''\n    selectedCategory: string // unique title\n    handleOutput: (selectedItemTitle: string, picId: PathHash) => void\n    itemSize: number\n}\ntype ItemsState = {\n}\nclass Items extends React.Component<ItemsPorps, ItemsState> {\n    constructor (props: ItemsPorps) {\n        super(props)\n        this.state = {\n        }\n    }\n    onItemClicked (itemTitle: string, pidId: PathHash) {\n        this.props.handleOutput(itemTitle, pidId)\n    }\n    render () {\n        const itemSize = this.props.itemSize\n        const ROOT = Global.root\n        const curCateData = Global.config!.category[this.props.selectedCategory]\n        const picsMetadata = Global.metadata!.data\n        const itemsData = curCateData.items.slice()\n        if (curCateData.info.allowBlank) {\n            itemsData.unshift({\n                title: '',\n                pic: {\n                    picId: '',\n                    defaultPosition: [0, 0]\n                }\n            })\n        }\n        const itemsUI = itemsData.map((item) => {\n            // /sources/FullPath\n            if (!item.pic.picId) {\n                return (\n                    <div\n                        onClick={() => this.onItemClicked(item.title, item.pic.picId)}\n                        className={\n                            (this.props.selectedItem === item.title ? 'selected-item' : '')\n                            + ' item'\n                        }\n                        key={''}\n                        style={{width: itemSize + 'px', height: itemSize + 'px'}}\n                    >\n                    </div>\n                )\n            }\n            const m = picsMetadata[item.pic.picId]\n            const path = ROOT + (m.miniPath || m.path)\n            return (\n                <div\n                    onClick={() => this.onItemClicked(item.title, item.pic.picId)}\n                    className={\n                        (this.props.selectedItem === item.title ? 'selected-item' : '')\n                        + ' item'\n                    }\n                    key={path}\n                >\n                    <Item\n                        size={itemSize}\n                        path={path}\n                        picId={item.pic.picId}\n                    />\n                </div>\n            )\n        })\n        return (\n            <div className=\"items\">\n                {itemsUI}\n            </div>\n        )\n    }\n}\n\ntype SelectorProps = {\n    width: number\n}\ntype SelectorState = {\n    selectedCategory: string\n    userData: UserOutputData\n    outputImage: string | null\n}\nexport default class Selector extends React.Component<SelectorProps, SelectorState> {\n    categoryData: Config['category']\n    constructor (props: SelectorProps) {\n        super(props)\n        this.categoryData = Global.config!.category\n        this.state = {\n            selectedCategory: this.getInitSelectedCategory(),\n            userData: genInitUserData(Global.root!, this.categoryData, Global.metadata!.data),\n            outputImage: null\n        }\n        this.getSelectedItem = this.getSelectedItem.bind(this)\n    }\n    getInitSelectedCategory (): string{\n        return Object.keys(Global.config!.category)\n            .find(title => Global.config!.category[title].info.index === 1)!\n    }\n    handleCategoryClick (title: string) {\n        this.setState({\n            selectedCategory: title\n        })\n    }\n    getSelectedItem (itemTitle: string, picId: PathHash) {\n        console.log(itemTitle)\n        const c = this.state.selectedCategory\n        if (itemTitle === '') {\n            delete this.state.userData[c]\n            this.setState({\n                userData: {\n                    ...this.state.userData,\n                }\n            })\n            return\n        }\n        if (this.state.userData[c] && this.state.userData[c].itemTitle === itemTitle) {\n            return\n        }\n        this.setState({\n            userData: {\n                ...this.state.userData,\n                [c]: genSingleUserData(Global.root!, this.categoryData, Global.metadata!.data, c, picId)\n            }\n        })\n    }\n    downloadOutputImage () {\n        const imagep = genOutputImage(this.state.userData)\n        if (isInEvilBrowser()) {\n            imagep.then((canvas) => {\n                canvas.toBlob((blob) => {\n                    const reader = new FileReader()\n                    reader.readAsDataURL(blob!)\n                    reader.onload = (e) => {\n                        this.setState({\n                            outputImage: e.target?.result as string\n                        })\n                    }\n                })\n            })\n        } else {\n            imagep.then((canvas) => {\n                canvas.toBlob(function (blob) {\n                    saveAs(blob!, 'output.png')\n                })\n            })\n        }\n    }\n    componentDidUpdate (prevProps: SelectorProps, prevState: SelectorState) {\n        if (prevState.outputImage != null) {\n            this.setState({\n                outputImage: null\n            })\n        }\n    }\n    render () {\n        const width = this.props.width\n        const categoryData = this.categoryData\n        const categoryUI = Object.keys(categoryData)\n            .sort((a, b) => categoryData[a].info.index - categoryData[b].info.index)\n            .map((ctitle) => {\n                const info = categoryData[ctitle].info\n                if (info.hide) {\n                    return (\n                        <div key={ctitle}></div>\n                    )\n                }\n                return (\n                    <div\n                        key={ctitle}\n                        className={\n                            (this.state.selectedCategory === ctitle ? 'selected-category': '')\n                            + ' category-item'\n                        }\n                        style={{width: width / 4 + 'px', height: width / 4 / 1.8 + 'px'}}\n                    >\n                        {\n                            info.icon &&\n                            <img src={info.icon} alt=\"\"/>\n                        }\n                        <button onClick={() => this.handleCategoryClick(ctitle)}>{ctitle}</button>\n                    </div>\n                )\n            })\n        const selectedCategory = this.state.selectedCategory\n        const u = this.state.userData[selectedCategory]\n        \n        return (\n            <div>\n                <Popup\n                    content={this.state.outputImage}\n                >\n                </Popup>\n                <ResultPreview\n                    width={'100%'}\n                    userData={this.state.userData}\n                />\n                <div className=\"category\">\n                    {categoryUI}\n                </div>\n                <Items\n                    handleOutput={this.getSelectedItem}\n                    selectedCategory={selectedCategory}\n                    selectedItem={u ? u.itemTitle : ''}\n                    itemSize={width / 3}\n                />\n                <button className=\"download-btn\" onClick={() => this.downloadOutputImage()}>下载</button>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Config, Metadata } from './data-format-def';\nimport './Main.css'\nimport './linmo.css'\nimport Selector from './Selector'\nimport { isInEvilBrowser } from './utils';\n\ntype MainProps = {\n    config: Config,\n    metadata: Metadata\n}\ntype MainState = {\n}\nexport default class Main extends React.Component<MainProps, MainState> {\n    constructor (props: MainProps) {\n        super(props)\n    }\n    componentWillUnmount () {\n        // delete Global.config\n        // delete Global.metadata\n    }\n    render () {\n        const width = document.body.clientWidth * 0.7 * 0.94\n        return (\n            <div className=\"main\">\n                <div className=\"container\">\n                    <header className=\"header\"></header>\n                    <div className=\"body\">\n                        <Selector\n                            width={width > 400 ? 400 * 0.94 : (width < 330 ? 330 * 0.94 : width)}\n                        />\n                        {\n                            isInEvilBrowser()\n                            ? <p className=\"warning\">温馨提示：你当前在APP内置浏览器中，若想保存图片请点击下载按钮后长按上方预览区保存</p>\n                            : <p className=\"warning\">{this.props.config.info.interface.footerText}</p>\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { CategoryInfoFromForm, CategoryRawData, ConfigFromForm, PicsMetadata } from './data-format-def';\nimport './Form.css'\nimport { getCategoryRawData } from './data-trans';\n\ntype Author = {\n    name: string\n    email: string\n    website: string\n}\ntype Interface = {\n    footerText: string\n}\ntype FormState = {\n    author: Author\n    interface: Interface\n    title: string\n}\ntype FormProps = {\n    handleOutput: (output: ConfigFromForm) => void\n    picsMetadata: PicsMetadata | undefined\n}\nclass Form extends React.Component<FormProps, FormState> {\n    categoryData: CategoryInfoFromForm\n\n    constructor (props: FormProps) {\n        super(props)\n        this.state = {\n            author: {\n                name: '',\n                email: '',\n                website: ''\n            }, \n            interface: {\n                footerText: ''\n            },\n            title: '',\n        }\n        this.categoryData = {}\n        this.getFullData = this.getFullData.bind(this)\n        this.getCategoryInfo = this.getCategoryInfo.bind(this)\n        this.onInputChange = this.onInputChange.bind(this)\n    }\n    getFullData (): ConfigFromForm {\n        const data: ConfigFromForm = {\n            info: {\n                author: Object.assign({}, this.state.author),\n                interface: Object.assign({}, this.state.interface),\n                title: this.state.title\n            },\n            category: this.categoryData\n        }\n        return data\n    }\n    getCategoryInfo (categoryInfo: CategoryInfoFromForm) {\n        this.categoryData = categoryInfo\n    }\n    onInputChange (e: React.ChangeEvent<HTMLInputElement>, property: string) {\n        switch (property) {\n            case 'name':\n            case 'email':\n            case 'website':\n                this.setState({\n                    author: {\n                        ...this.state.author,\n                        [property]: e.target.value\n                    }\n                })\n                break\n            case 'footerText':\n                this.setState({\n                    interface: {\n                        ...this.state.interface,\n                        [property]: e.target.value\n                    }\n                })\n                break\n            case 'title':\n                this.setState({\n                    title: e.target.value\n                })\n        }\n    }\n    onConfirm () {\n        if (!this.props.picsMetadata) {\n            return\n        }\n        this.props.handleOutput(this.getFullData())\n    }\n    render () {\n        return (\n            <form>\n                <h2>填写作者信息（也可以不填）</h2>\n                名字：\n                <input\n                    value={this.state.author.name}\n                    type=\"text\"\n                    onChange={(e) => this.onInputChange(e, 'name')}\n                /><br/>\n                邮箱：\n                <input\n                    value={this.state.author.email}\n                    type=\"text\"\n                    onChange={(e) => this.onInputChange(e, 'email')}\n                /><br/>\n                网址：\n                <input\n                    value={this.state.author.website}\n                    type=\"text\"\n                    onChange={(e) => this.onInputChange(e, 'website')}\n                /><br/>\n                <h2>填写页面信息（也可以不填，但最好填）</h2>\n                页面标题：\n                <input\n                    value={this.state.title}\n                    type=\"text\"\n                    onChange={(e) => this.onInputChange(e, 'title')}\n                /><br/>\n                页脚文字：\n                <input\n                    value={this.state.interface.footerText}\n                    type=\"text\"\n                    onChange={(e) => this.onInputChange(e, 'footerText')}\n                /><br/>\n                <h2>填写分类信息</h2>\n                {this.props.picsMetadata &&\n                    <PicsCategoryForm\n                        handleOutput={this.getCategoryInfo}\n                        picsMetadata={this.props.picsMetadata}\n                    />\n                }\n                <input\n                    className=\"form-button\"\n                    type=\"button\"\n                    value=\"确定\"\n                    onClick={() => this.onConfirm()}\n                />\n            </form>\n        )\n    }\n}\n\ntype PicsClassFormState = {\n    categoryRawData: CategoryRawData\n    data: CategoryInfoFromForm\n}\ntype PicsClassFormProps = {\n    picsMetadata: PicsMetadata\n    handleOutput: (categoryInfoFromForm: CategoryInfoFromForm) => void\n}\nclass PicsCategoryForm extends React.Component<PicsClassFormProps, PicsClassFormState> {\n    constructor (props: PicsClassFormProps) {\n        super(props)\n        const categoryRawData = getCategoryRawData(this.props.picsMetadata)\n        this.state = {\n            categoryRawData: categoryRawData,\n            data: PicsCategoryForm.initFormData(categoryRawData)\n        }\n        this.props.handleOutput(this.state.data)\n        this.handleChange = this.handleChange.bind(this)\n    }\n    static initFormData (categoryRawData: CategoryRawData) {\n        const res: CategoryInfoFromForm = {}\n        let i = 1\n        for (const title in categoryRawData) {\n            res[title] = {\n                title: title,\n                allowBlank: false,\n                hide: false,\n                index: i++\n            }\n        }\n        return res\n    }\n    componentDidUpdate (oldProps: PicsClassFormProps) {\n        if (this.props.picsMetadata === oldProps.picsMetadata) {\n            return\n        }\n        const categoryRawData = getCategoryRawData(this.props.picsMetadata)\n        this.setState({\n            categoryRawData: categoryRawData,\n            data: PicsCategoryForm.initFormData(categoryRawData)\n        })\n    }\n    handleChange (r: string, title: string, property: string) {\n        const copy: CategoryInfoFromForm = {}\n        Object.assign(copy, this.state.data)\n        Object.keys(copy).forEach(key => {\n            copy[key] = Object.assign({}, copy[key])\n        })\n        switch(property) {\n            case 'allowBlank':\n                copy[title].allowBlank = !copy[title].allowBlank\n                break\n            case 'hide':\n                copy[title].hide = !copy[title].hide\n                break\n            case 'index':\n                copy[title].index = parseInt(r)\n                break\n        }\n        this.setState({\n            data: copy\n        })\n        this.props.handleOutput(JSON.parse(JSON.stringify(copy)))\n    }\n    render () {\n        const categoryData = this.state.categoryRawData\n        const len = Object.keys(categoryData).length\n        const categoryForm = \n            Object.keys(categoryData)\n            .map((title, currentIndex) => {\n                return (\n                    <tr key={title}>\n                        <td>\n                            <span>{categoryData[title].info.title}</span>\n                        </td>\n                        <td>\n                            <input\n                                onChange={(e) => this.handleChange(e.target.value, title, 'allowBlank')}\n                                checked={this.state.data[title].allowBlank}\n                                name={title + '-allowBlank'}\n                                type=\"checkbox\"\n                            />\n                        </td>\n                        <td>\n                            <input\n                                onChange={(e) => this.handleChange(e.target.value, title, 'hide')}\n                                checked={this.state.data[title].hide}\n                                name={title + '-hide'}\n                                type=\"checkbox\"\n                            />\n                        </td>\n                        <td>\n                            <select\n                                onChange={(e) => this.handleChange(e.target.value, title, 'index')}\n                                name={title + '-index'}\n                                value={this.state.data[title].index}\n                            >\n                                {\n                                    Array.from(Array(len))\n                                        .map((e, i) =>\n                                            <option\n                                                key={i + 1}\n                                                value={i + 1}\n                                            > {i + 1}\n                                            </option>\n                                        )\n                                }\n                            </select>\n                        </td>\n                    </tr>\n                )\n            })\n        return (\n            <div className=\"form-category-data\">\n                <table>\n                    <thead>\n                        <tr>\n                            <td>类别</td>\n                            <td>允许该类别有空白项</td>\n                            <td>该类别不允许选择</td>\n                            <td>层序（数字大的在上面）</td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {categoryForm}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default Form","import React from 'react';\nimport './Test.css';\nimport { DirUploadInput, ShowLocalImage, SaveTextLink, ImageOnCanvas } from './common'\nimport { ConfigFromForm } from './data-format-def';\nimport Form from './Form';\nimport { genConfig, genHashFromSourceFileList, genMetadata } from './data-trans'\n\nclass Test extends React.Component<any, any>{\n  constructor (props: any) {\n    super(props)\n    document.title = '拉聂耳地区'\n    this.state = {\n      testFileList: null,\n      formOutput: null,\n      testImageJSX: (\n        <div></div>\n      )\n    }\n    const testImage = new Image()\n    testImage.src = '/sources/linmo/pics/衣服/蓝色卫衣.png'\n    testImage.onload = (e) => {\n      if (!e.target) {\n        return\n      }\n      this.setState({\n        testImageJSX: (\n          <div style={{'backgroundColor': '#fff'}}>\n            <ImageOnCanvas\n              imageObjs={[testImage]}\n              canvasSize={[90, 90]}\n              border={5}\n            ></ImageOnCanvas>\n          </div>\n        )\n      })\n    }\n  }\n  getFileList (fileList: FileList) {\n    this.setState({\n      testFileList: fileList\n    })\n  }\n  getFormOutput (output: ConfigFromForm) {\n    this.setState({\n      formOutput: output\n    })\n  }\n  genConfig () {\n    if (!this.state.testFileList || !this.state.formOutput) {\n      return ''\n    }\n    console.log(this.state.testFileList, this.state.formOutput)\n    const config = genConfig(this.state.formOutput, this.state.testFileList)\n    console.log(JSON.stringify(config))\n    return JSON.stringify(config)\n  }\n  render () {\n    const files = this.state.testFileList\n    let metadataJSON = '{}'\n    let testHash = ''\n    let metadata\n    if (files) {\n      metadata = genMetadata(files as FileList)\n      metadataJSON = JSON.stringify(metadata)\n      testHash = genHashFromSourceFileList(files)\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            FBI WARNING\n          </p>\n          <p>\n            欢迎你来到神秘页面\n          </p>\n          {this.state.testImageJSX}\n          <DirUploadInput\n            handleOutput={(fileList) => this.getFileList(fileList)}\n          />\n          <Form\n            handleOutput={(output) => this.getFormOutput(output)}\n            picsMetadata={metadata ? metadata.data : undefined}\n          />\n          {testHash}\n          <SaveTextLink\n            fileContent={metadataJSON}\n            filename=\"download_metadata_test.json\"\n            className=\"\"\n          >\n           metadata.json下载测试 \n          </SaveTextLink>\n          <SaveTextLink\n            fileContent={this.genConfig()}\n            filename=\"download_config_test.json\"\n            className=\"\"\n          >\n            config.json下载测试\n          </SaveTextLink>\n          <ShowLocalImage\n            imageFile={files ? files[2] : null}\n          />\n        </header>\n      </div>\n    );\n    }\n}\n\nexport default Test;\n","import React from 'react';\nimport './Create.css';\nimport { DirUploadInput, SaveTextLink } from './common'\nimport { ConfigFromForm } from './data-format-def';\nimport Form from './Form';\nimport { genConfig, genMetadata, getRootName } from './data-trans'\n\nclass Create extends React.Component<any, any>{\n  constructor (props: any) {\n    super(props)\n    document.title = '创建属于你的捏脸游戏！'\n    this.state = {\n      fileList: null,\n      formOutput: null\n    }\n  }\n  getFileList (fileList: FileList) {\n    this.setState({\n      fileList: fileList\n    })\n  }\n  getFormOutput (output: ConfigFromForm) {\n    this.setState({\n      formOutput: output\n    })\n  }\n  genConfig () {\n    if (!this.state.fileList || !this.state.formOutput) {\n      return ''\n    }\n    const config = genConfig(this.state.formOutput, this.state.fileList)\n    console.log(JSON.stringify(config))\n    return JSON.stringify(config)\n  }\n  render () {\n    const files = this.state.fileList\n    const rootJSON = `\n    {\n        \"root\": \"/sources/${getRootName(files)}/\"\n    }\n    `\n    let metadataJSON = '{}'\n    let metadata\n    if (files) {\n      metadata = genMetadata(files as FileList)\n      metadataJSON = JSON.stringify(metadata)\n    }\n    console.log(files)\n    return (\n      <div className=\"App\">\n            <header className=\"app-header\">\n                <h2>!醒目! 请使用电脑进行操作</h2>\n                <h2>首先</h2>\n                <p>所有的素材必须是正方形且大小一致，格式为png</p>\n                <h2>然后</h2>\n                <p>新建一个文件夹，取个英文名，比如 example</p>\n                <p>进入这个文件夹，再新建一个文件夹，取名为 pics</p>\n                <p>进入 pics 文件夹，按照你的想法新建若干个文件夹，每个文件夹代表你的素材的分类</p>\n                <p>比如 表情 衣服 背景 等等</p>\n                <p>在相应的文件夹中放入相应的素材</p>\n                <h2>在这里传入刚才第一次建好的文件夹（比如 example）</h2>\n                <DirUploadInput\n                    handleOutput={(fileList) => this.getFileList(fileList)}\n                />\n\n                <Form\n                    handleOutput={(output) => this.getFormOutput(output)}\n                    picsMetadata={metadata ? metadata.data : undefined}\n                >\n                </Form>\n                <h2>填完点击确定后会出现三个下载按钮：</h2>\n                {\n                    this.state.formOutput\n                    ? (\n                        <div>\n                            <SaveTextLink\n                                fileContent={metadataJSON}\n                                filename=\"metadata.json\"\n                                className=\"download-config-link\"\n                            >\n                            下载metadata.json \n                            </SaveTextLink>\n                            <SaveTextLink\n                                fileContent={this.genConfig()}\n                                filename=\"config.json\"\n                                className=\"download-config-link\"\n                            >\n                            下载config.json\n                            </SaveTextLink>\n                            <SaveTextLink\n                                fileContent={rootJSON}\n                                filename=\"root.json\"\n                                className=\"download-config-link\"\n                            >\n                            下载root.json\n                            </SaveTextLink>\n                        </div>\n                    )\n                    : (<div></div>)\n                }\n                <h2>上面三个文件下载后</h2>\n                <p>进入刚才创建的 example 文件夹，将这三个文件放到文件夹中</p>\n                <p>这样你的资源包就完成啦！撒花✨</p>\n                <h2>接下来进入最后一步（非常复杂）</h2>\n                <p>上传你的资源包到可以被访问到的地方，有两种选择：</p>\n                <p>1. 通过提pr的方式上传到<a href=\"https://github.com/mengrru/lm-instance\">此仓库</a>的 main 分支的 sources 目录下</p>\n                <p>2. 自行购买静态存储服务（如阿里云OSS）上传，并将 root.json 中的 root 字段改为你的资源所在的绝对地址，然后通过提pr的方式上传 root.json 到<a href=\"https://github.com/mengrru/lm-instance\">此仓库</a>的 main 分支的 sources 目录下</p>\n                <p>上述教程我暂时懒得写了，如果想上传可以直接发邮件到 mengrru@outlook.com 让我帮你上传白嫖我的OSS</p>\n            </header>\n      </div>\n    );\n    }\n}\n\nexport default Create;\n\n","export default function IndexContent () {\n  document.title = '欢迎光临'\n  const divCSS: React.CSSProperties = {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    height: '100%'\n  }\n  const btnCSS: React.CSSProperties = {\n    display: 'inline-block',\n    border: '1px solid rgb(73,125,63)',\n    padding: '5px 5px',\n    borderRadius: '7px',\n    margin: '5px',\n    color: 'rgb(73,125,63)',\n    textDecoration: 'none',\n    opacity: '.7',\n    marginTop: '30px'\n  }\n  return (\n    <div style={divCSS}>\n      <a style={btnCSS} href=\"/linmo\">林墨换装游戏</a>\n      <a style={btnCSS} href=\"/linmo/auto\">用你的id生成一个林墨</a>\n      <a style={btnCSS} href=\"/create\">我也要创建一个换装游戏（测试）</a>\n    </div>\n  )\n}","import React from 'react';\nimport { Config, Metadata, UserOutputData } from './data-format-def';\nimport { genInitUserData, genSingleUserData, getRootName } from './data-trans';\nimport Global from './global';\nimport { genOutputImage } from './utils';\nimport './Auto.css'\nimport { Md5 } from 'ts-md5/dist/md5'\n\ntype AutoProps = {\n    config: Config,\n    metadata: Metadata\n    rootName: string\n}\ntype AutoState = {\n    userOutputData: UserOutputData\n    outputImageBase64: string\n    userInput: string\n}\nexport default class Auto extends React.Component<AutoProps, AutoState>{\n    constructor (props: AutoProps) {\n        super(props)\n        this.state = {\n            userOutputData: genInitUserData(\n                Global.root!,\n                this.props.config.category,\n                this.props.metadata.data\n            ),\n            outputImageBase64: '',\n            userInput: ''\n        }\n    }\n    componentDidMount () {\n        this.refreshImage()\n    }\n    componentDidUpdate () {\n\n    }\n    onInputChange (v: string) {\n        this.setState({\n            userInput: v\n        })\n    }\n    onConfirm () {\n        this.genUserData()\n    }\n    genUserData () {\n        const cInfo = this.props.config.category\n        const cTitles = Object.keys(this.props.config.category).filter(v => !cInfo[v].info.hide).sort((a, b) => a < b ? 1 : -1)\n        const cLen = cTitles.length\n        const md5str: string = Md5.hashStr(this.state.userInput) as string\n        const mLen = md5str.length\n        let sLen = Math.floor(mLen / cLen)\n        let sMax = parseInt(Array(sLen).fill('F').join(''), 16)\n        const newUserOutputData: UserOutputData = genInitUserData(Global.root!, cInfo, this.props.metadata.data)\n        for (let i = 0; i < cLen; i++) {\n            const num = parseInt(md5str.slice(i * sLen, i * sLen + sLen), 16)\n            const cTitle = cTitles[i]\n            const items = cInfo[cTitle].items.slice().sort((a, b) => a.title < b.title ? 1 : -1)\n            const iLen = items.length\n            const iIndex = Math.floor(num / (sMax / iLen))\n            newUserOutputData[cTitle] = genSingleUserData(Global.root!, cInfo, this.props.metadata.data, cTitle, items[iIndex].pic.picId)\n        }\n        this.setState({\n            userOutputData: newUserOutputData\n        }, () => {\n            this.refreshImage()\n        })\n    }\n    refreshImage () {\n        this.setState({\n            outputImageBase64: ''\n        })\n        const imagep = genOutputImage(this.state.userOutputData)\n        imagep.then((canvas) => {\n            canvas.toBlob((blob) => {\n                const reader = new FileReader()\n                reader.readAsDataURL(blob!)\n                reader.onload = (e) => {\n                    this.setState({\n                        outputImageBase64: e.target?.result as string\n                    })\n                }\n            })\n        })\n    }\n    render () {\n        return (\n            <div className=\"auto-container\">\n                <h2 className=\"auto-title\">{this.props.config.info.title}</h2>\n                <div className=\"auto-image-container\">\n                    {\n                        this.state.outputImageBase64\n                        ? (\n                            <img src={this.state.outputImageBase64} alt={this.props.config.info.title}/>\n                        )\n                        : '努力加载中...'\n                    }\n                </div>\n                <div className=\"auto-input-container\">\n                    <input className=\"auto-input\" type=\"text\" placeholder=\"输入你的名字、id或其它\" onChange={(e) => this.onInputChange(e.target.value)}/>\n                    <br/>\n                    <button className=\"auto-button\" onClick={() => this.onConfirm()}>点击获得图片</button>\n                </div>\n                <div className=\"auto-link-container\">\n                    <a href={'/' + this.props.rootName}>去玩换装游戏</a>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  withRouter\n} from \"react-router-dom\"\nimport './index.css';\nimport Main from './Main';\nimport Test from './Test';\nimport { loadFile } from './utils';\nimport Global from './global'\nimport { Root } from './data-format-def';\nimport Create from './Create'\nimport IndexContent from './temp-index'\nimport Auto from './Auto'\n\nfunction Index () {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/:id/:auto\" children={<WithRouterPage />} />\n          <Route path=\"/:id\" children={<WithRouterPage />} />\n          <Route path=\"/\">\n          {/*\n            <Create />\n          */}\n            <IndexContent />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\n// :id change -> state.pageId change -> exec render() function ->\n// render child page to 'loading' -> exec componentDidMount -> use id fetch config ->\n// change Page state -> rerender child page to real page or 404\n\nclass Page extends React.Component<any, any> {\n  constructor (props: any) {\n    super(props)\n    this.state = {\n      config: null,\n      metadata: null,\n      pageId: null\n    }\n  }\n  static getDerivedStateFromProps(props: any, state: any) {\n    if (props.match.params.id !== state.pageId) {\n      return {\n        pageId: props.match.params.id,\n        isAuto: props.match.params.auto === 'auto'\n      }\n    }\n    return null\n  }\n  componentDidMount () {\n    switch (this.state.pageId) {\n      case 'create':\n      case 'test':\n        return\n    }\n    loadFile('/sources/' + this.state.pageId + '/root.json')\n      .then((data) => {\n        const rootData: Root = JSON.parse(data)\n        Global.root = rootData.root\n        const root = Global.root\n\n        loadFile(root + 'config.json')\n          .then((config) => {\n            this.setState({\n              config: config\n            })\n          }).catch((err) => {\n            throw Error(err)\n          })\n        loadFile(root + 'metadata.json')\n          .then((metadata) => {\n            this.setState({\n              metadata: metadata\n            })\n          }).catch((err) => {\n            throw Error(err)\n          })\n      })\n    }\n  // think memory\n  render () {\n    const id = this.state.pageId\n    const isAuto = this.state.isAuto\n    switch (id) {\n      case 'create':\n        return (\n          <Create />\n        )\n      case 'test':\n        return (\n          <Test />\n        )\n      default:\n        if (!this.state.config || !this.state.metadata) {\n          return <div>loading</div>\n        } else {\n          try {\n            const config = JSON.parse(this.state.config)\n            const metadata = JSON.parse(this.state.metadata)\n            Global.config = config\n            Global.metadata = metadata\n            document.title = config.info.title\n            if (isAuto) {\n              return (\n                <Auto\n                  config={config}\n                  metadata={metadata}\n                  rootName={id}\n                />\n              )\n            } else {\n              return (\n                <Main\n                  config={config}\n                  metadata={metadata}\n                />\n              )\n            }\n          } catch {\n            return (\n              <div>{'出错啦QAQ'}</div>\n            )\n          }\n        }\n    }\n  }\n}\n\nconst WithRouterPage = withRouter(Page)\n\nReactDOM.render(\n  <React.StrictMode>\n    {Index()}\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}